{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./chatbot.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./chatbot.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { ChatbotServiceService } from '../service/chatbot-service.service';\nvar ChatbotComponent = /** @class */function () {\n  function ChatbotComponent(chatbotService) {\n    this.chatbotService = chatbotService;\n    this.messages = [];\n    this.showChatbot = true;\n  }\n  ChatbotComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    console.log('test');\n    this.chatbotService.getSessionId().subscribe(function (res) {\n      console.log(res);\n      _this.sessionId = res;\n    });\n    // const d = JSON.stringify(this.chatbotService.getSessionId());\n    // console.log(d);\n  };\n\n  ChatbotComponent.prototype.openChatbot = function () {\n    this.showChatbot = true;\n  };\n  ChatbotComponent.prototype.closeChatbot = function () {\n    this.showChatbot = false;\n    this.messages = [];\n    this.userInput = '';\n  };\n  ChatbotComponent.prototype.sendMessage = function () {\n    var _this = this;\n    if (this.userInput.trim() === '') {\n      return;\n    }\n    this.messages.push({\n      text: this.userInput,\n      isUserMessage: true\n    });\n    // this.messages.push({ text: this.userInput, isUserMessage: true });\n    // Send user input to Spring Boot backend\n    // @ts-ignore\n    this.chatbotService.sendMessage(this.userInput, this.sessionId).subscribe(function (res) {\n      var message = res.message;\n      _this.messages.push({\n        text: message,\n        isUserMessage: false\n      });\n    }, function (error) {\n      console.error('Error:', error);\n      // Display a user-friendly error message\n      // or handle the error in some other way\n    });\n  };\n\n  ChatbotComponent.ctorParameters = function () {\n    return [{\n      type: ChatbotServiceService\n    }];\n  };\n  ChatbotComponent = __decorate([Component({\n    selector: 'app-chatbot',\n    template: __NG_CLI_RESOURCE__0,\n    styles: [__NG_CLI_RESOURCE__1]\n  }), __metadata(\"design:paramtypes\", [ChatbotServiceService])], ChatbotComponent);\n  return ChatbotComponent;\n}();\nexport { ChatbotComponent };","map":{"version":3,"mappings":";;;AAAA,SAAQA,SAAS,QAAe,eAAe;AAC/C,SAAQC,qBAAqB,QAAO,oCAAoC;AAOxE;EAOE,0BAAoBC,cAAqC;IAArC,mBAAc,GAAdA,cAAc;IALlC,aAAQ,GAAU,EAAE;IAMlB,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;EAEAC,mCAAQ,GAAR;IAAA;IACEC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,IAAI,CAACJ,cAAc,CAACK,YAAY,EAAE,CAACC,SAAS,CAAC,aAAG;MAC9CH,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;MAChBC,KAAI,CAACC,SAAS,GAAGF,GAAG;IACtB,CAAC,CAAC;IACF;IACA;EACF,CAAC;;EAEDL,sCAAW,GAAX;IACE,IAAI,CAACD,WAAW,GAAG,IAAI;EACzB,CAAC;EAEDC,uCAAY,GAAZ;IACE,IAAI,CAACD,WAAW,GAAG,KAAK;IACxB,IAAI,CAACS,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,SAAS,GAAG,EAAE;EACrB,CAAC;EAEDT,sCAAW,GAAX;IAAA;IACE,IAAI,IAAI,CAACS,SAAS,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;MAChC;;IAGF,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC;MAAEC,IAAI,EAAE,IAAI,CAACH,SAAS;MAAEI,aAAa,EAAE;IAAI,CAAE,CAAC;IACjE;IAEA;IACA;IACA,IAAI,CAACf,cAAc,CAACgB,WAAW,CAAC,IAAI,CAACL,SAAS,EAAE,IAAI,CAACF,SAAS,CAAC,CAACH,SAAS,CAAC,aAAG;MAC3E,IAAMW,OAAO,GAAGV,GAAG,CAACU,OAAO;MAC3BT,KAAI,CAACE,QAAQ,CAACG,IAAI,CAAC;QAAEC,IAAI,EAAEG,OAAO;QAAEF,aAAa,EAAE;MAAK,CAAE,CAAC;IAC7D,CAAC,EACC,eAAK;MACHZ,OAAO,CAACe,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B;MACA;IACF,CAAC,CAAC;EACN,CAAC;;;;;;;EAlDUhB,gBAAgB,eAL5BJ,SAAS,CAAC;IACTqB,QAAQ,EAAE,aAAa;IACvBC,8BAAuC;;GAExC,CAAC,mCAQoCrB,qBAAqB,KAP9CG,gBAAgB,CAoD5B;EAAD,uBAAC;CAAA,CAzDD;SAKaA,gBAAgB","names":["Component","ChatbotServiceService","chatbotService","showChatbot","ChatbotComponent","console","log","getSessionId","subscribe","res","_this","sessionId","messages","userInput","trim","push","text","isUserMessage","sendMessage","message","error","selector","template"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\chatbot\\chatbot.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {ChatbotServiceService} from '../service/chatbot-service.service';\n\n@Component({\n  selector: 'app-chatbot',\n  templateUrl: './chatbot.component.html',\n  styleUrls: ['./chatbot.component.css']\n})\nexport class ChatbotComponent implements OnInit {\n  showChatbot: boolean;\n  messages: any[] = [];\n  userInput: string;\n  response: string;\n  sessionId: string;\n\n  constructor(private chatbotService: ChatbotServiceService) {\n    this.showChatbot = true;\n  }\n\n  ngOnInit(): void {\n    console.log('test');\n    this.chatbotService.getSessionId().subscribe(res => {\n      console.log(res);\n      this.sessionId = res;\n    });\n    // const d = JSON.stringify(this.chatbotService.getSessionId());\n    // console.log(d);\n  }\n\n  openChatbot() {\n    this.showChatbot = true;\n  }\n\n  closeChatbot() {\n    this.showChatbot = false;\n    this.messages = [];\n    this.userInput = '';\n  }\n\n  sendMessage() {\n    if (this.userInput.trim() === '') {\n      return;\n    }\n\n    this.messages.push({ text: this.userInput, isUserMessage: true });\n    // this.messages.push({ text: this.userInput, isUserMessage: true });\n\n    // Send user input to Spring Boot backend\n    // @ts-ignore\n    this.chatbotService.sendMessage(this.userInput, this.sessionId).subscribe(res => {\n      const message = res.message;\n      this.messages.push({ text: message, isUserMessage: false });\n    },\n      error => {\n        console.error('Error:', error);\n        // Display a user-friendly error message\n        // or handle the error in some other way\n      });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}