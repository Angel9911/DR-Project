{"ast":null,"code":"import _defineProperty from \"E:/Programs/SpringAngularProject/angular7-springboot-crud-tutorial-master/update-version/angular7-spring-boot-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClientService } from '../../../service/customer/http-client.service';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { AlertServiceService } from '../../../service/alert-service.service';\nimport { Customer } from '../../../models/user';\nimport { AuthenticationService } from '../../../authentication/authentication.service';\nimport { DataService } from '../../../service/data.service';\nimport { User_account } from '../../../models/user_account';\nimport { AuthService } from '../../../service/auth/auth.service';\nimport { FacebookLoginProvider, GoogleLoginProvider, SocialAuthService } from '@abacritt/angularx-social-login';\nlet LoginUserComponent = class LoginUserComponent /*extends UserDetails */ {\n  // tslint:disable-next-line:max-line-length\n  constructor(signInAuthService, auth, httpClientService, router, formBuilder, alertService, authservice, dataService) {\n    _defineProperty(this, \"signInAuthService\", void 0);\n    _defineProperty(this, \"auth\", void 0);\n    _defineProperty(this, \"httpClientService\", void 0);\n    _defineProperty(this, \"router\", void 0);\n    _defineProperty(this, \"formBuilder\", void 0);\n    _defineProperty(this, \"alertService\", void 0);\n    _defineProperty(this, \"authservice\", void 0);\n    _defineProperty(this, \"dataService\", void 0);\n    _defineProperty(this, \"resultObject\", new EventEmitter());\n    _defineProperty(this, \"FbSrc\", 'assets/images/FaceBook-icon.png');\n    _defineProperty(this, \"FbAlt\", 'facebook');\n    // for authenticate\n    _defineProperty(this, \"isLoggedin\", false);\n    _defineProperty(this, \"isLoginFailed\", false);\n    _defineProperty(this, \"isUsernameExist\", false);\n    _defineProperty(this, \"errorMessage\", '');\n    // @ts-ignore\n    _defineProperty(this, \"customer\", new Customer());\n    // tslint:disable-next-line:variable-name\n    _defineProperty(this, \"user_acc\", new User_account());\n    // @ts-ignore\n    _defineProperty(this, \"result\", new Customer());\n    // legit ot tuk nadolu\n    _defineProperty(this, \"loginform\", void 0);\n    _defineProperty(this, \"submitted\", void 0);\n    _defineProperty(this, \"loading\", void 0);\n    _defineProperty(this, \"user\", void 0);\n    // tslint:disable-next-line:max-line-length\n    _defineProperty(this, \"paypal\", void 0);\n    this.signInAuthService = signInAuthService;\n    this.auth = auth;\n    this.httpClientService = httpClientService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.alertService = alertService;\n    this.authservice = authservice;\n    this.dataService = dataService;\n    /* if (this.authservice.loggedIn) {\r\n       this.router.navigate(['layout']);\r\n     }\r\n    this.googleAuthService.authState.subscribe((user: SocialUser) => {\r\n        console.log(user);\r\n    }) */\n    this.CreateLoginForm();\n  }\n  ngOnInit() {\n    this.signInAuthService.authState.subscribe(user => {\n      console.log('test');\n      console.log(user);\n      this.user = user;\n    });\n  }\n  get username() {\n    return this.loginform.get('username');\n  }\n  get password() {\n    return this.loginform.get('password');\n  }\n  CreateLoginForm() {\n    this.loginform = this.formBuilder.group({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8)])\n    });\n  }\n  LoginUser(user) {\n    this.submitted = true;\n    this.alertService.clear();\n    if (this.loginform.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.user_acc.username = String(this.username.value);\n    this.user_acc.password = String(this.password.value);\n    this.customer.user_account = this.user_acc;\n    // console.log(this.customer.username + this.customer.password);\n    this.httpClientService.findUsername(this.customer.user_account.username).subscribe(data => {\n      // tslint:disable-next-line:triple-equals\n      if (data != false) {\n        this.isUsernameExist = true;\n      }\n    });\n    this.auth.authenticate(this.customer.user_account.username, this.customer.user_account.password).subscribe(data => {\n      this.isLoggedin = true;\n      // tslint:disable-next-line:no-shadowed-variable\n      this.httpClientService.loginCustomer(this.customer.user_account.username).subscribe(data => {\n        this.result = data;\n        this.dataService.customer = this.result;\n      });\n      this.router.navigate(['/customers/home']);\n    }, error => {\n      if (!this.isUsernameExist) {\n        console.log(this.isUsernameExist);\n        alert('Въвели сте грешно потребителско име.Моля опитайте отново');\n      } else if (error != null) {\n        alert('Въвели сте грешна парола.Моля опитайте отново');\n      }\n      console.log('test error: ' + error);\n      this.errorMessage = error;\n      this.isLoggedin = false;\n      this.isLoginFailed = true;\n    });\n    console.log('test-stest: ' + this.result);\n  }\n  loginWithGoogle() {\n    this.signInAuthService.signIn(GoogleLoginProvider.PROVIDER_ID).then(() => this.router.navigate(['/customers/home']));\n  }\n  loginWithFacebook() {\n    let googleLoginOptions = {\n      scope: 'profile email'\n    };\n    this.signInAuthService.signIn(FacebookLoginProvider.PROVIDER_ID, googleLoginOptions).then(() => this.router.navigate(['/customers/home']));\n  }\n};\n__decorate([Output(), __metadata(\"design:type\", Object)], LoginUserComponent.prototype, \"resultObject\", void 0);\nLoginUserComponent = __decorate([Component({\n  selector: 'app-login-user',\n  templateUrl: './login-user.component.html',\n  styleUrls: ['./login-user.component.css']\n}), __metadata(\"design:paramtypes\", [SocialAuthService, AuthService, HttpClientService, Router, FormBuilder, AlertServiceService, AuthenticationService, DataService])], LoginUserComponent);\nexport { LoginUserComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}