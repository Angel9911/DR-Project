{"ast":null,"code":"import { __assign, __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Alert, AlertType } from '../models/alert';\nimport { filter } from 'rxjs/operators';\nvar AlertServiceService = /** @class */function () {\n  function AlertServiceService() {\n    this.subject = new Subject();\n    this.defaultId = 'default-alert';\n  }\n  // enable subscribing to alerts observable\n  AlertServiceService.prototype.onAlert = function (id) {\n    if (id === void 0) {\n      id = this.defaultId;\n    }\n    return this.subject.asObservable().pipe(filter(function (x) {\n      return x && x.id === id;\n    }));\n  };\n  AlertServiceService.prototype.success = function (message, options) {\n    this.alert(new Alert(__assign(__assign({}, options), {\n      type: AlertType.Success,\n      message: message\n    })));\n  };\n  AlertServiceService.prototype.error = function (message, options) {\n    this.alert(new Alert(__assign(__assign({}, options), {\n      type: AlertType.Error,\n      message: message\n    })));\n  };\n  AlertServiceService.prototype.alert = function (alert) {\n    alert.id = alert.id || this.defaultId;\n    this.subject.next(alert);\n  };\n  AlertServiceService.prototype.clear = function (id) {\n    if (id === void 0) {\n      id = this.defaultId;\n    }\n    this.subject.next(new Alert({\n      id: id\n    }));\n  };\n  AlertServiceService.ctorParameters = function () {\n    return [];\n  };\n  AlertServiceService = __decorate([Injectable({\n    providedIn: 'root'\n  }), __metadata(\"design:paramtypes\", [])], AlertServiceService);\n  return AlertServiceService;\n}();\nexport { AlertServiceService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAAoBC,OAAO,QAAO,MAAM;AACxC,SAAQC,KAAK,EAAEC,SAAS,QAAO,iBAAiB;AAChD,SAAQC,MAAM,QAAO,gBAAgB;AAMrC;EAGE;IAFM,YAAO,GAAG,IAAIH,OAAO,EAAS;IAC9B,cAAS,GAAG,eAAe;EACjB;EAChB;EACAI,qCAAO,GAAP,UAAQC,EAAmB;IAAnB;MAAAA,KAAK,IAAI,CAACC,SAAS;IAAA;IACzB,OAAO,IAAI,CAACC,OAAO,CAACC,YAAY,EAAE,CAACC,IAAI,CAACN,MAAM,CAAC,WAAC;MAAI,QAAC,IAAIO,CAAC,CAACL,EAAE,KAAKA,EAAE;IAAhB,CAAgB,CAAC,CAAC;EACxE,CAAC;EACDD,qCAAO,GAAP,UAAQO,OAAe,EAAEC,OAAa;IACpC,IAAI,CAACC,KAAK,CAAC,IAAIZ,KAAK,uBAAMW,OAAO;MAAEE,IAAI,EAAEZ,SAAS,CAACa,OAAO;MAAEJ,OAAO;IAAA,GAAG,CAAC;EACzE,CAAC;EAEDP,mCAAK,GAAL,UAAMO,OAAe,EAAEC,OAAa;IAClC,IAAI,CAACC,KAAK,CAAC,IAAIZ,KAAK,uBAAMW,OAAO;MAAEE,IAAI,EAAEZ,SAAS,CAACc,KAAK;MAAEL,OAAO;IAAA,GAAG,CAAC;EACvE,CAAC;EACDP,mCAAK,GAAL,UAAMS,KAAY;IAChBA,KAAK,CAACR,EAAE,GAAGQ,KAAK,CAACR,EAAE,IAAI,IAAI,CAACC,SAAS;IACrC,IAAI,CAACC,OAAO,CAACU,IAAI,CAACJ,KAAK,CAAC;EAC1B,CAAC;EAEDT,mCAAK,GAAL,UAAMC,EAAmB;IAAnB;MAAAA,KAAK,IAAI,CAACC,SAAS;IAAA;IACvB,IAAI,CAACC,OAAO,CAACU,IAAI,CAAC,IAAIhB,KAAK,CAAC;MAAEI,EAAE;IAAA,CAAE,CAAC,CAAC;EACtC,CAAC;;;;EAtBUD,mBAAmB,eAH/BL,UAAU,CAAC;IACVmB,UAAU,EAAE;GACb,CAAC,wCACWd,mBAAmB,CAuB/B;EAAD,0BAAC;CAAA,CA1BD;SAGaA,mBAAmB","names":["Injectable","Subject","Alert","AlertType","filter","AlertServiceService","id","defaultId","subject","asObservable","pipe","x","message","options","alert","type","Success","Error","next","providedIn"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\service\\alert-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {Alert, AlertType} from '../models/alert';\nimport {filter} from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertServiceService {\nprivate subject = new Subject<Alert>();\nprivate defaultId = 'default-alert';\n  constructor() { }\n  // enable subscribing to alerts observable\n  onAlert(id = this.defaultId): Observable<Alert> {\n    return this.subject.asObservable().pipe(filter(x => x && x.id === id));\n  }\n  success(message: string, options?: any) {\n    this.alert(new Alert({ ...options, type: AlertType.Success, message }));\n  }\n\n  error(message: string, options?: any) {\n    this.alert(new Alert({ ...options, type: AlertType.Error, message }));\n  }\n  alert(alert: Alert) {\n    alert.id = alert.id || this.defaultId;\n    this.subject.next(alert);\n  }\n\n  clear(id = this.defaultId) {\n    this.subject.next(new Alert({ id }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}