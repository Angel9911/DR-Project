{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nvar baseUrl = 'http://localhost:8082/courier/';\nvar reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json',\n  Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n});\nvar HttpCourierService = /** @class */function () {\n  function HttpCourierService(httpClient) {\n    this.httpClient = httpClient;\n  }\n  HttpCourierService.prototype.loginCourier = function (username) {\n    var url = 'http://localhost:8082/courier';\n    return this.httpClient.get(\"\".concat(url, \"?username=\").concat(username), {\n      headers: reqHeader\n    });\n  };\n  HttpCourierService.prototype.getPackages = function (username) {\n    var url = baseUrl + 'packages';\n    return this.httpClient.get(\"\".concat(url, \"?username=\").concat(username), {\n      headers: reqHeader\n    });\n  };\n  HttpCourierService.prototype.getProblemPackages = function (username) {\n    var url = baseUrl + 'packages' + '/' + 'problem';\n    return this.httpClient.get(\"\".concat(url, \"?username=\").concat(username), {\n      headers: reqHeader\n    });\n  };\n  HttpCourierService.prototype.getDeliveredPackages = function (username) {\n    var url = baseUrl + 'packages' + '/' + 'delivered';\n    return this.httpClient.get(\"\".concat(url, \"?username=\").concat(username), {\n      headers: reqHeader\n    });\n  };\n  HttpCourierService.prototype.updateProblemPackage = function (statusType, packageId, message, imgFile) {\n    var url = baseUrl + 'package' + '/' + 'problem' + '/' + 'update';\n    console.log(imgFile);\n    // tslint:disable-next-line:max-line-length\n    return this.httpClient.post(\"\".concat(url, \"?packageId=\").concat(packageId, \"&status=\").concat(statusType, \"&message=\").concat(message), {\n      file: imgFile\n    }, {\n      headers: reqHeader\n    });\n  };\n  HttpCourierService.prototype.updatePackageSuccessfull = function (statusType, packageId) {\n    var url = baseUrl + 'package' + '/' + 'update';\n    return this.httpClient.put(\"\".concat(url, \"?packageId=\").concat(packageId, \"&status=\").concat(statusType), {\n      headers: reqHeader\n    });\n  };\n  HttpCourierService.ctorParameters = function () {\n    return [{\n      type: HttpClient\n    }];\n  };\n  HttpCourierService = __decorate([Injectable({\n    providedIn: 'root'\n  }), __metadata(\"design:paramtypes\", [HttpClient])], HttpCourierService);\n  return HttpCourierService;\n}();\nexport { HttpCourierService };","map":{"version":3,"mappings":";AAAA,SAAQA,UAAU,QAAO,eAAe;AACxC,SAAQC,UAAU,EAAEC,WAAW,QAAO,sBAAsB;AAI5D,IAAMC,OAAO,GAAG,gCAAgC;AAChD,IAAMC,SAAS,GAAG,IAAIF,WAAW,CAAC;EAChC,cAAc,EAAE,kBAAkB;EAClCG,cAAc,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;CACrE,CAAC;AAKF;EAEE,4BAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAC9B;EAEAC,yCAAY,GAAZ,UAAaC,QAAgB;IAC3B,IAAMC,GAAG,GAAG,+BAA+B;IAC3C,OAAO,IAAI,CAACH,UAAU,CAACI,GAAG,CAAU,UAAGD,GAAG,uBAAaD,QAAQ,CAAE,EAAE;MAACG,OAAO,EAAEX;IAAS,CAAC,CAAC;EAC1F,CAAC;EAEDO,wCAAW,GAAX,UAAYC,QAAgB;IAC1B,IAAMC,GAAG,GAAGV,OAAO,GAAG,UAAU;IAChC,OAAO,IAAI,CAACO,UAAU,CAACI,GAAG,CAAW,UAAGD,GAAG,uBAAaD,QAAQ,CAAE,EAAE;MAACG,OAAO,EAAEX;IAAS,CAAC,CAAC;EAC3F,CAAC;EAEDO,+CAAkB,GAAlB,UAAmBC,QAAgB;IACjC,IAAMC,GAAG,GAAGV,OAAO,GAAG,UAAU,GAAG,GAAG,GAAG,SAAS;IAClD,OAAO,IAAI,CAACO,UAAU,CAACI,GAAG,CAAW,UAAGD,GAAG,uBAAaD,QAAQ,CAAE,EAAE;MAACG,OAAO,EAAEX;IAAS,CAAC,CAAC;EAC3F,CAAC;EAEDO,iDAAoB,GAApB,UAAqBC,QAAgB;IACnC,IAAMC,GAAG,GAAGV,OAAO,GAAG,UAAU,GAAG,GAAG,GAAG,WAAW;IACpD,OAAO,IAAI,CAACO,UAAU,CAACI,GAAG,CAAW,UAAGD,GAAG,uBAAaD,QAAQ,CAAE,EAAE;MAACG,OAAO,EAAEX;IAAS,CAAC,CAAC;EAC3F,CAAC;EAEDO,iDAAoB,GAApB,UAAqBK,UAAkB,EAAEC,SAAiB,EAAEC,OAAe,EAAEC,OAAiB;IAC5F,IAAMN,GAAG,GAAGV,OAAO,GAAG,SAAS,GAAG,GAAG,GAAG,SAAS,GAAG,GAAG,GAAG,QAAQ;IAClEiB,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACpB;IACA,OAAO,IAAI,CAACT,UAAU,CAACY,IAAI,CAAS,UAAGT,GAAG,wBAAcI,SAAS,qBAAWD,UAAU,sBAAYE,OAAO,CAAE,EAAE;MAACK,IAAI,EAAEJ;IAAO,CAAC,EAAE;MAACJ,OAAO,EAAEX;IAAS,CAAC,CAAC;EACrJ,CAAC;EAEDO,qDAAwB,GAAxB,UAAyBK,UAAkB,EAAEC,SAAiB;IAC5D,IAAMJ,GAAG,GAAGV,OAAO,GAAG,SAAS,GAAG,GAAG,GAAG,QAAQ;IAChD,OAAO,IAAI,CAACO,UAAU,CAACc,GAAG,CAAC,UAAGX,GAAG,wBAAcI,SAAS,qBAAWD,UAAU,CAAE,EAAE;MAACD,OAAO,EAAEX;IAAS,CAAC,CAAC;EACxG,CAAC;;;;;;EAnCUO,kBAAkB,eAH9BX,UAAU,CAAC;IACVyB,UAAU,EAAE;GACb,CAAC,mCAGgCxB,UAAU,KAF/BU,kBAAkB,CAoC9B;EAAD,yBAAC;CAAA,CAvCD;SAGaA,kBAAkB","names":["Injectable","HttpClient","HttpHeaders","baseUrl","reqHeader","Authentication","JSON","parse","localStorage","getItem","httpClient","HttpCourierService","username","url","get","headers","statusType","packageId","message","imgFile","console","log","post","file","put","providedIn"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\service\\courier\\http-courier.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Courier} from '../../models/Courier';\nimport {Packages} from '../../models/Packages';\n\nconst baseUrl = 'http://localhost:8082/courier/';\nconst reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json',\n  Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n});\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpCourierService {\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  loginCourier(username: string) {\n    const url = 'http://localhost:8082/courier';\n    return this.httpClient.get<Courier>(`${url}?username=${username}`, {headers: reqHeader});\n  }\n\n  getPackages(username: string) {\n    const url = baseUrl + 'packages';\n    return this.httpClient.get<Packages>(`${url}?username=${username}`, {headers: reqHeader});\n  }\n\n  getProblemPackages(username: string) {\n    const url = baseUrl + 'packages' + '/' + 'problem';\n    return this.httpClient.get<Packages>(`${url}?username=${username}`, {headers: reqHeader});\n  }\n\n  getDeliveredPackages(username: string) {\n    const url = baseUrl + 'packages' + '/' + 'delivered';\n    return this.httpClient.get<Packages>(`${url}?username=${username}`, {headers: reqHeader});\n  }\n\n  updateProblemPackage(statusType: string, packageId: bigint, message: string, imgFile: FormData) {\n    const url = baseUrl + 'package' + '/' + 'problem' + '/' + 'update';\n    console.log(imgFile);\n    // tslint:disable-next-line:max-line-length\n    return this.httpClient.post<string>(`${url}?packageId=${packageId}&status=${statusType}&message=${message}`, {file: imgFile}, {headers: reqHeader});\n  }\n\n  updatePackageSuccessfull(statusType: string, packageId: bigint) {\n    const url = baseUrl + 'package' + '/' + 'update';\n    return this.httpClient.put(`${url}?packageId=${packageId}&status=${statusType}`, {headers: reqHeader});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}