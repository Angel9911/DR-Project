{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nvar headers = new HttpHeaders().set('Content-Type', 'application/json');\nvar AuthService = /** @class */function () {\n  function AuthService(httpClient, router) {\n    this.httpClient = httpClient;\n    this.router = router;\n  }\n  AuthService.prototype.authenticate = function (username, password) {\n    // @ts-ignore\n    // tslint:disable-next-line:max-line-length\n    return this.httpClient.post('http://localhost:8082/login', {\n      username: username,\n      password: password\n    }, {\n      headers: headers\n    }).pipe(catchError(this.handleError), map(function (userData) {\n      sessionStorage.setItem('username', username);\n      var tokenStr = 'Bearer ' + userData.token;\n      console.log('Token' + tokenStr);\n      sessionStorage.setItem('token', tokenStr);\n      sessionStorage.setItem('roles', JSON.stringify(userData.roles));\n      return userData;\n    }));\n  };\n  AuthService.prototype.getToken = function () {\n    return sessionStorage.getItem('token');\n  };\n  AuthService.prototype.logout = function () {\n    sessionStorage.clear();\n    this.router.navigate(['']);\n  };\n  AuthService.prototype.isLoggedIn = function () {\n    return sessionStorage.getItem('username') !== null;\n  };\n  AuthService.prototype.handleError = function (httpError) {\n    var message = '';\n    if (httpError.error instanceof ProgressEvent) {\n      console.log('in progrss event');\n      message = 'Network error';\n    } else {\n      message = httpError.error.message;\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\"Backend returned code \".concat(httpError.status, \", \") + \"body was: \".concat(httpError.error));\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(message);\n  };\n  AuthService.ctorParameters = function () {\n    return [{\n      type: HttpClient\n    }, {\n      type: Router\n    }];\n  };\n  AuthService = __decorate([Injectable({\n    providedIn: 'root'\n  }), __metadata(\"design:paramtypes\", [HttpClient, Router])], AuthService);\n  return AuthService;\n}();\nexport { AuthService };","map":{"version":3,"mappings":";AAAA,SAAQA,UAAU,QAAO,eAAe;AACxC,SAAQC,UAAU,EAAqBC,WAAW,QAAO,sBAAsB;AAC/E,SAAQC,UAAU,EAAEC,GAAG,QAAO,gBAAgB;AAC9C,SAAQC,UAAU,QAAO,MAAM;AAC/B,SAAQC,MAAM,QAAO,iBAAiB;AAEtC,IAAMC,OAAO,GAAG,IAAIL,WAAW,EAAE,CAACM,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;AAKzE;EAEE,qBAAoBC,UAAsB,EAAUC,MAAc;IAA9C,eAAU,GAAVD,UAAU;IAAsB,WAAM,GAANC,MAAM;EAC1D;EAEAC,kCAAY,GAAZ,UAAaC,QAAgB,EAAEC,QAAgB;IAC7C;IACA;IACA,OAAO,IAAI,CAACJ,UAAU,CAACK,IAAI,CAAM,6BAA6B,EAAE;MAC9DF,QAAQ;MACRC,QAAQ;KACT,EAAE;MAACN,OAAO;IAAA,CAAC,CAAC,CAACQ,IAAI,CAACZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,EAAEZ,GAAG,CAAC,kBAAQ;MAC3Da,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEN,QAAQ,CAAC;MAC5C,IAAMO,QAAQ,GAAG,SAAS,GAAGC,QAAQ,CAACC,KAAK;MAC3CC,OAAO,CAACC,GAAG,CAAC,OAAO,GAAGJ,QAAQ,CAAC;MAC/BF,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEC,QAAQ,CAAC;MACzCF,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEM,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACM,KAAK,CAAC,CAAC;MAC/D,OAAON,QAAQ;IACjB,CAAC,CAAC,CAAC;EACL,CAAC;EAEMT,8BAAQ,GAAf;IACE,OAAOM,cAAc,CAACU,OAAO,CAAC,OAAO,CAAC;EACxC,CAAC;EAEDhB,4BAAM,GAAN;IACEM,cAAc,CAACW,KAAK,EAAE;IACtB,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5B,CAAC;EAEDlB,gCAAU,GAAV;IACE,OAAOM,cAAc,CAACU,OAAO,CAAC,UAAU,CAAC,KAAK,IAAI;EACpD,CAAC;EAEOhB,iCAAW,GAAnB,UAAoBmB,SAA4B;IAC9C,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAID,SAAS,CAACE,KAAK,YAAYC,aAAa,EAAE;MAC5CX,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/BQ,OAAO,GAAG,eAAe;KAC1B,MAAM;MACLA,OAAO,GAAGD,SAAS,CAACE,KAAK,CAACD,OAAO;MACjC;MACA;MACAT,OAAO,CAACU,KAAK,CACX,gCAAyBF,SAAS,CAACI,MAAM,OAAI,GAC7C,oBAAaJ,SAAS,CAACE,KAAK,CAAE,CAAC;;IAEnC;IACA,OAAO3B,UAAU,CAAC0B,OAAO,CAAC;EAC5B,CAAC;;;;;;;;EAjDUpB,WAAW,eAHvBX,UAAU,CAAC;IACVmC,UAAU,EAAE;GACb,CAAC,mCAGgClC,UAAU,EAAkBK,MAAM,KAFvDK,WAAW,CAkDvB;EAAD,kBAAC;CAAA,CArDD;SAGaA,WAAW","names":["Injectable","HttpClient","HttpHeaders","catchError","map","throwError","Router","headers","set","httpClient","router","AuthService","username","password","post","pipe","handleError","sessionStorage","setItem","tokenStr","userData","token","console","log","JSON","stringify","roles","getItem","clear","navigate","httpError","message","error","ProgressEvent","status","providedIn"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\service\\auth\\auth.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\nimport {catchError, map} from 'rxjs/operators';\nimport {throwError} from 'rxjs';\nimport {Router} from '@angular/router';\n\nconst headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private httpClient: HttpClient, private router: Router) {\n  }\n\n  authenticate(username: string, password: string) {\n    // @ts-ignore\n    // tslint:disable-next-line:max-line-length\n    return this.httpClient.post<any>('http://localhost:8082/login', {\n      username,\n      password\n    }, {headers}).pipe(catchError(this.handleError), map(userData => {\n      sessionStorage.setItem('username', username);\n      const tokenStr = 'Bearer ' + userData.token;\n      console.log('Token' + tokenStr);\n      sessionStorage.setItem('token', tokenStr);\n      sessionStorage.setItem('roles', JSON.stringify(userData.roles));\n      return userData;\n    }));\n  }\n\n  public getToken() {\n    return sessionStorage.getItem('token');\n  }\n\n  logout() {\n    sessionStorage.clear();\n    this.router.navigate(['']);\n  }\n\n  isLoggedIn(): boolean {\n    return sessionStorage.getItem('username') !== null;\n  }\n\n  private handleError(httpError: HttpErrorResponse) {\n    let message = '';\n    if (httpError.error instanceof ProgressEvent) {\n      console.log('in progrss event');\n      message = 'Network error';\n    } else {\n      message = httpError.error.message;\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${httpError.status}, ` +\n        `body was: ${httpError.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(message);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}