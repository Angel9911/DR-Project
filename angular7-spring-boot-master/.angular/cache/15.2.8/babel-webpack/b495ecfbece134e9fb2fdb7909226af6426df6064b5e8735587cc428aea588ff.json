{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./login-user.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./login-user.component.css?ngResource\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClientService } from '../../../service/customer/http-client.service';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { AlertServiceService } from '../../../service/alert-service.service';\nimport { Customer } from '../../../models/user';\nimport { AuthenticationService } from '../../../authentication/authentication.service';\nimport { DataService } from '../../../service/data.service';\nimport { User_account } from '../../../models/user_account';\nimport { AuthService } from '../../../service/auth/auth.service';\nvar LoginUserComponent = /** @class */function () {\n  // tslint:disable-next-line:max-line-length\n  function LoginUserComponent(auth, httpClientService, router, formBuilder, alertService, authservice, dataService) {\n    this.auth = auth;\n    this.httpClientService = httpClientService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.alertService = alertService;\n    this.authservice = authservice;\n    this.dataService = dataService;\n    this.resultObject = new EventEmitter();\n    // for authenticate\n    this.isLoggedin = false;\n    this.isLoginFailed = false;\n    this.isUsernameExist = false;\n    this.errorMessage = '';\n    // @ts-ignore\n    this.customer = new Customer();\n    // tslint:disable-next-line:variable-name\n    this.user_acc = new User_account();\n    // @ts-ignore\n    this.result = new Customer();\n    /* if (this.authservice.loggedIn) {\r\n       this.router.navigate(['layout']);\r\n     } */\n    this.CreateLoginForm();\n  }\n  LoginUserComponent.prototype.ngOnInit = function () {};\n  Object.defineProperty(LoginUserComponent.prototype, \"username\", {\n    get: function () {\n      return this.loginform.get('username');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LoginUserComponent.prototype, \"password\", {\n    get: function () {\n      return this.loginform.get('password');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  LoginUserComponent.prototype.CreateLoginForm = function () {\n    this.loginform = this.formBuilder.group({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8)])\n    });\n  };\n  LoginUserComponent.prototype.LoginUser = function (user) {\n    var _this = this;\n    this.submitted = true;\n    this.alertService.clear();\n    if (this.loginform.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.user_acc.username = String(this.username.value);\n    this.user_acc.password = String(this.password.value);\n    this.customer.user_account = this.user_acc;\n    // console.log(this.customer.username + this.customer.password);\n    this.httpClientService.findUsername(this.customer.user_account.username).subscribe(function (data) {\n      // tslint:disable-next-line:triple-equals\n      if (data != false) {\n        _this.isUsernameExist = true;\n      }\n    });\n    this.auth.authenticate(this.customer.user_account.username, this.customer.user_account.password).subscribe(function (data) {\n      _this.isLoggedin = true;\n      // tslint:disable-next-line:no-shadowed-variable\n      _this.httpClientService.loginCustomer(_this.customer.user_account.username).subscribe(function (data) {\n        _this.result = data;\n        _this.dataService.customer = _this.result;\n      });\n      _this.router.navigate(['/customers/home']);\n    }, function (error) {\n      if (!_this.isUsernameExist) {\n        console.log(_this.isUsernameExist);\n        alert('Въвели сте грешно потребителско име.Моля опитайте отново');\n      } else if (error != null) {\n        alert('Въвели сте грешна парола.Моля опитайте отново');\n      }\n      console.log('test error: ' + error);\n      _this.errorMessage = error;\n      _this.isLoggedin = false;\n      _this.isLoginFailed = true;\n    });\n    console.log('test-stest: ' + this.result);\n  };\n  LoginUserComponent.ctorParameters = function () {\n    return [{\n      type: AuthService\n    }, {\n      type: HttpClientService\n    }, {\n      type: Router\n    }, {\n      type: FormBuilder\n    }, {\n      type: AlertServiceService\n    }, {\n      type: AuthenticationService\n    }, {\n      type: DataService\n    }];\n  };\n  LoginUserComponent.propDecorators = {\n    resultObject: [{\n      type: Output\n    }]\n  };\n  LoginUserComponent = __decorate([Component({\n    selector: 'app-login-user',\n    template: __NG_CLI_RESOURCE__0,\n    styles: [__NG_CLI_RESOURCE__1]\n  }), __metadata(\"design:paramtypes\", [AuthService, HttpClientService, Router, FormBuilder, AlertServiceService, AuthenticationService, DataService])], LoginUserComponent);\n  return LoginUserComponent;\n}();\nexport { LoginUserComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Output","Router","HttpClientService","FormBuilder","FormControl","Validators","AlertServiceService","Customer","AuthenticationService","DataService","User_account","AuthService","auth","httpClientService","router","formBuilder","alertService","authservice","dataService","CreateLoginForm","LoginUserComponent","Object","loginform","get","group","username","required","password","minLength","user","submitted","clear","invalid","loading","user_acc","String","value","customer","user_account","findUsername","subscribe","data","_this","isUsernameExist","authenticate","isLoggedin","loginCustomer","result","navigate","console","log","alert","error","errorMessage","isLoginFailed","selector","template"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\customers\\account-user\\login-user\\login-user.component.ts"],"sourcesContent":["import {Component, ElementRef, EventEmitter, OnInit, Output, Renderer2, ViewChild, Inject} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {HttpClientService} from '../../../service/customer/http-client.service';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {AlertServiceService} from '../../../service/alert-service.service';\r\nimport {Customer} from '../../../models/user';\r\nimport {AuthenticationService} from '../../../authentication/authentication.service';\r\nimport {DataService} from '../../../service/data.service';\r\nimport {User_account} from '../../../models/user_account';\r\nimport {AuthService} from '../../../service/auth/auth.service';\r\nimport {DOCUMENT} from '@angular/common';\r\n@Component({\r\n  selector: 'app-login-user',\r\n  templateUrl: './login-user.component.html',\r\n  styleUrls: ['./login-user.component.css']\r\n})\r\nexport class LoginUserComponent /*extends UserDetails */implements OnInit {\r\n  @Output() resultObject = new EventEmitter<Customer>();\r\n  // for authenticate\r\n  isLoggedin = false;\r\n  isLoginFailed = false;\r\n  isUsernameExist = false;\r\n  errorMessage = '';\r\n  // @ts-ignore\r\n  customer = new Customer();\r\n  // tslint:disable-next-line:variable-name\r\n  user_acc = new User_account();\r\n  // @ts-ignore\r\n  result = new Customer();\r\n  // legit ot tuk nadolu\r\n  loginform: FormGroup;\r\n  submitted: boolean;\r\n  loading: boolean;\r\n\r\n  // tslint:disable-next-line:max-line-length\r\n  private paypal: any;\r\n  // tslint:disable-next-line:max-line-length\r\n  constructor(private auth: AuthService, private httpClientService: HttpClientService, private router: Router, protected formBuilder: FormBuilder, private alertService: AlertServiceService, private authservice: AuthenticationService, private dataService: DataService) {\r\n    /* if (this.authservice.loggedIn) {\r\n       this.router.navigate(['layout']);\r\n     } */\r\n    this.CreateLoginForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  get username() {\r\n    return this.loginform.get('username');\r\n  }\r\n\r\n  get password() {\r\n    return this.loginform.get('password');\r\n  }\r\n\r\n  CreateLoginForm() {\r\n    this.loginform = this.formBuilder.group({\r\n      username: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8)])\r\n    });\r\n  }\r\n\r\n  LoginUser(user) {\r\n    this.submitted = true;\r\n    this.alertService.clear();\r\n    if (this.loginform.invalid) {\r\n      return;\r\n    }\r\n    this.loading = true;\r\n    this.user_acc.username = String(this.username.value);\r\n    this.user_acc.password = String(this.password.value);\r\n    this.customer.user_account = this.user_acc;\r\n    // console.log(this.customer.username + this.customer.password);\r\n    this.httpClientService.findUsername(this.customer.user_account.username).subscribe(data => {\r\n      // tslint:disable-next-line:triple-equals\r\n      if (data != false) {\r\n        this.isUsernameExist = true;\r\n      }\r\n    });\r\n    this.auth.authenticate(this.customer.user_account.username, this.customer.user_account.password).subscribe(\r\n      data => {\r\n        this.isLoggedin = true;\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        this.httpClientService.loginCustomer(this.customer.user_account.username).subscribe(data => {\r\n          this.result = data;\r\n          this.dataService.customer = this.result;\r\n        });\r\n        this.router.navigate(['/customers/home']);\r\n      }, error => {\r\n        if (!this.isUsernameExist) {\r\n          console.log(this.isUsernameExist);\r\n          alert('Въвели сте грешно потребителско име.Моля опитайте отново');\r\n        } else if (error != null) {\r\n          alert('Въвели сте грешна парола.Моля опитайте отново');\r\n        }\r\n        console.log('test error: ' + error);\r\n        this.errorMessage = error;\r\n        this.isLoggedin = false;\r\n        this.isLoginFailed = true;\r\n      }\r\n    );\r\n    console.log('test-stest: ' + this.result);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}