{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nvar paypalUrl = 'http://localhost:8082/paypal/';\nvar reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json',\n  Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n});\nvar PaymentServiceService = /** @class */function () {\n  function PaymentServiceService(httpPayment) {\n    this.httpPayment = httpPayment;\n  }\n  PaymentServiceService.prototype.makePayment = function (paymentOrder) {\n    var url = paypalUrl + 'make/payment';\n    // @ts-ignore\n    return this.httpPayment.post(url, paymentOrder, {\n      headers: reqHeader,\n      responseType: 'text'\n    });\n    /* return this.httpPayment.post(url, { paymentOrder }, {headers: reqHeader, responseType: 'text'})\r\n       .subscribe((paymentDetails: any) => {\r\n         // Initiate the PayPal payment\r\n         this.paypal.Buttons({\r\n           createOrder: (data, actions) => {\r\n             return actions.order.create({\r\n               purchase_units: [{\r\n                 amount: {\r\n                   value: paymentOrder.package_price\r\n                 }\r\n               }]\r\n             });\r\n           },\r\n           onApprove: (data, actions) => {\r\n             // Handle the approved payment\r\n             // ...\r\n           }\r\n         }).render('#paypal-button-container');\r\n       }); */\n  };\n\n  PaymentServiceService.prototype.cancelPayment = function () {\n    var url = paypalUrl + 'cancel/payment';\n  };\n  PaymentServiceService.ctorParameters = function () {\n    return [{\n      type: HttpClient\n    }];\n  };\n  PaymentServiceService = __decorate([Injectable({\n    providedIn: 'root'\n  }), __metadata(\"design:paramtypes\", [HttpClient])], PaymentServiceService);\n  return PaymentServiceService;\n}();\nexport { PaymentServiceService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAAQC,UAAU,EAAEC,WAAW,QAAO,sBAAsB;AAI5D,IAAMC,SAAS,GAAG,+BAA+B;AACjD,IAAMC,SAAS,GAAG,IAAIF,WAAW,CAAC;EAChC,cAAc,EAAE,kBAAkB;EAClCG,cAAc,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;CACrE,CAAC;AAKF;EAGE,+BAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,2CAAW,GAAX,UAAYC,YAA0B;IACpC,IAAMC,GAAG,GAAGV,SAAS,GAAG,cAAc;IACtC;IACA,OAAO,IAAI,CAACO,WAAW,CAACI,IAAI,CAACD,GAAG,EAAED,YAAY,EAAE;MAACG,OAAO,EAAEX,SAAS;MAAEY,YAAY,EAAE;IAAM,CAAC,CAAC;IAC5F;;;;;;;;;;;;;;;;;;;EAoBD,CAAC;;EACDL,6CAAa,GAAb;IACE,IAAME,GAAG,GAAGV,SAAS,GAAG,gBAAgB;EAE1C,CAAC;;;;;;EAjCUQ,qBAAqB,eAHjCX,UAAU,CAAC;IACViB,UAAU,EAAE;GACb,CAAC,mCAIiChB,UAAU,KAHhCU,qBAAqB,CAkCjC;EAAD,4BAAC;CAAA,CArCD;SAGaA,qBAAqB","names":["Injectable","HttpClient","HttpHeaders","paypalUrl","reqHeader","Authentication","JSON","parse","localStorage","getItem","httpPayment","PaymentServiceService","paymentOrder","url","post","headers","responseType","providedIn"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\service\\payment-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {PaymentOrder} from '../models/PaymentOrder';\nimport {Customer} from '../models/user';\n\nconst paypalUrl = 'http://localhost:8082/paypal/';\nconst reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json',\n  Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n});\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentServiceService {\n  private paypal: any;\n\n  constructor(private httpPayment: HttpClient) { }\n\n  makePayment(paymentOrder: PaymentOrder) {\n    const url = paypalUrl + 'make/payment';\n    // @ts-ignore\n    return this.httpPayment.post(url, paymentOrder, {headers: reqHeader, responseType: 'text'});\n   /* return this.httpPayment.post(url, { paymentOrder }, {headers: reqHeader, responseType: 'text'})\n      .subscribe((paymentDetails: any) => {\n        // Initiate the PayPal payment\n        this.paypal.Buttons({\n          createOrder: (data, actions) => {\n            return actions.order.create({\n              purchase_units: [{\n                amount: {\n                  value: paymentOrder.package_price\n                }\n              }]\n            });\n          },\n          onApprove: (data, actions) => {\n            // Handle the approved payment\n            // ...\n          }\n        }).render('#paypal-button-container');\n      }); */\n\n  }\n  cancelPayment() {\n    const url = paypalUrl + 'cancel/payment';\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}