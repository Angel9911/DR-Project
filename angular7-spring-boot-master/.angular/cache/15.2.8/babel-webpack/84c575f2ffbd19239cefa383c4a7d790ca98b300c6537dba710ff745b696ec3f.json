{"ast":null,"code":"import { map } from 'rxjs/operators';\nexport function existingUsernameValidator(userService) {\n  return function (control) {\n    console.log('in validator: ' + control.value);\n    return userService.findUsername(control.value).pipe(map(function (user) {\n      // tslint:disable-next-line:triple-equals\n      if (user != false) {\n        return {\n          usernameExists: true\n        };\n      } else {\n        return null;\n      }\n    }));\n  };\n}\nexport function existingEmailValidator(userService) {\n  return function (control) {\n    console.log('in email validator: ' + control.value);\n    return userService.findEmail(control.value).pipe(map(function (customer) {\n      // tslint:disable-next-line:triple-equals\n      if (customer != false) {\n        return {\n          emailExists: true\n        };\n      } else {\n        return null;\n      }\n    },\n    // tslint:disable-next-line:no-shadowed-variable\n    function (error) {\n      console.log(error);\n    }));\n  };\n}","map":{"version":3,"mappings":"AAGA,SAAQA,GAAG,QAAO,gBAAgB;AAIlC,OAAM,SAAUC,yBAAyBA,CAACC,WAA8B;EACtE,OAAO,UAACC,OAAwB;IAC9BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGF,OAAO,CAACG,KAAK,CAAC;IAC7C,OAAOJ,WAAW,CAACK,YAAY,CAACJ,OAAO,CAACG,KAAK,CAAC,CAACE,IAAI,CAACR,GAAG,CACrD,UAACS,IAAa;MACZ;MACA,IAAIA,IAAI,IAAI,KAAK,EAAE;QACjB,OAAO;UAACC,cAAc,EAAE;QAAI,CAAC;OAC9B,MAAM;QACL,OAAO,IAAI;;IACN,CAAC,CACX,CAAC;EACJ,CAAC;AACH;AACA,OAAM,SAAUC,sBAAsBA,CAACT,WAA8B;EACnE,OAAO,UAACC,OAAwB;IAC9BC,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAGF,OAAO,CAACG,KAAK,CAAC;IACnD,OAAOJ,WAAW,CAACU,SAAS,CAACT,OAAO,CAACG,KAAK,CAAC,CAACE,IAAI,CAACR,GAAG,CAClD,UAACa,QAAiB;MAChB;MACA,IAAIA,QAAQ,IAAI,KAAK,EAAE;QACrB,OAAO;UAACC,WAAW,EAAE;QAAI,CAAC;OAC3B,MAAM;QACL,OAAO,IAAI;;IAEf,CAAC;IACD;IACA,UAACC,KAAK;MACJX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;IACpB,CAAC,CACF,CAAC;EACJ,CAAC;AACH","names":["map","existingUsernameValidator","userService","control","console","log","value","findUsername","pipe","user","usernameExists","existingEmailValidator","findEmail","customer","emailExists","error"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\helpers\\UsernameValidator.ts"],"sourcesContent":["import {HttpClientService} from '../service/customer/http-client.service';\r\nimport {AbstractControl, AsyncValidatorFn, ValidationErrors} from '@angular/forms';\r\nimport {Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\nimport {Customer} from '../models/user';\r\nimport {error} from 'util';\r\n\r\nexport function existingUsernameValidator(userService: HttpClientService): AsyncValidatorFn {\r\n  return (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\r\n    console.log('in validator: ' + control.value);\r\n    return userService.findUsername(control.value).pipe(map(\r\n      (user: boolean) => {\r\n        // tslint:disable-next-line:triple-equals\r\n        if (user != false) {\r\n          return {usernameExists: true};\r\n        } else {\r\n          return null;\r\n        }      }\r\n    ));\r\n  };\r\n}\r\nexport function existingEmailValidator(userService: HttpClientService): AsyncValidatorFn {\r\n  return (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\r\n    console.log('in email validator: ' + control.value);\r\n    return userService.findEmail(control.value).pipe(map(\r\n      (customer: boolean) => {\r\n        // tslint:disable-next-line:triple-equals\r\n        if (customer != false) {\r\n          return {emailExists: true};\r\n        } else {\r\n          return null;\r\n        }\r\n      },\r\n      // tslint:disable-next-line:no-shadowed-variable\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    ));\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}