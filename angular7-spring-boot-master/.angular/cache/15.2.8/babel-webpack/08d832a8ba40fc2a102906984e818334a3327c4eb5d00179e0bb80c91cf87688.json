{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./login-administrator.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./login-administrator.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Administrator } from '../../../models/administrator';\nimport { HttpAdiministratorService } from '../../../service/administrator/http-adiministrator.service';\nimport { Router } from '@angular/router';\nimport { User_account } from '../../../models/user_account';\nimport { AuthService } from '../../../service/auth/auth.service';\nimport { DataService } from '../../../service/data.service';\nvar LoginAdministratorComponent = /** @class */function () {\n  // tslint:disable-next-line:max-line-length\n  function LoginAdministratorComponent(form, httpService, router, auth, dataService) {\n    this.form = form;\n    this.httpService = httpService;\n    this.router = router;\n    this.auth = auth;\n    this.dataService = dataService;\n    this.invalidLogin = false;\n    this.isLoggedin = false;\n    this.isLoginFailed = false;\n    this.errorMessage = '';\n    // tslint:disable-next-line:variable-name\n    this.adminAccount = new User_account();\n    this.result = new Administrator();\n    this.createForm();\n  }\n  LoginAdministratorComponent.prototype.ngOnInit = function () {};\n  /* get username() {\r\n     return this.loginAdministratorForm.get('username');\r\n   }\r\n  \n   get password() {\r\n     return this.loginAdministratorForm.get('password');\r\n   } */\n  LoginAdministratorComponent.prototype.LoginAdministrator = function () {\n    var _this = this;\n    if (this.loginAdministratorForm.invalid) {\n      return;\n    }\n    // console.log(this.username.value + this.password.value);\n    this.auth.authenticate(this.adminAccount.username, this.adminAccount.password).subscribe(function (data) {\n      _this.isLoggedin = true;\n      _this.httpService.loginAdministrator(_this.adminAccount.username).subscribe(function (result) {\n        _this.result = result;\n        _this.dataService.administrator = _this.result;\n      });\n      // tslint:disable-next-line:no-shadowed-variable\n      _this.router.navigate(['/administrator/home']);\n    }, function (error) {\n      console.log(error);\n      _this.errorMessage = error;\n      _this.isLoggedin = false;\n      _this.isLoginFailed = true;\n    });\n    /* this.administrator_account.username = this.username.value;\r\n     this.administrator_account.password = this.password.value;\r\n     console.log(this.administrator_account.username + this.administrator_account.password); */\n    /*\r\n                  this.httpService.loginAdministrator(this.adminAccount.username).subscribe(data => {\r\n          this.result = data;\r\n          this.dataService.administrator = this.result;\r\n        });\r\n          this.httpService.loginAdministrator(this.username.value, this.password.value).subscribe(data => {\r\n      this.administrator_account = data;\r\n      if (this.administrator_account != null) {\r\n        this.router.navigate(['/administrator/home']);\r\n      } else {\r\n        this.invalidLogin = true;\r\n        alert('error');\r\n      }\r\n    }); */\n  };\n\n  LoginAdministratorComponent.prototype.createForm = function () {\n    this.loginAdministratorForm = this.form.group({\n      username: ['', Validators.compose([Validators.required])],\n      password: ['', Validators.required]\n    });\n  };\n  LoginAdministratorComponent.ctorParameters = function () {\n    return [{\n      type: FormBuilder\n    }, {\n      type: HttpAdiministratorService\n    }, {\n      type: Router\n    }, {\n      type: AuthService\n    }, {\n      type: DataService\n    }];\n  };\n  LoginAdministratorComponent = __decorate([Component({\n    selector: 'app-login-administrator',\n    template: __NG_CLI_RESOURCE__0,\n    styles: [__NG_CLI_RESOURCE__1]\n  }), __metadata(\"design:paramtypes\", [FormBuilder, HttpAdiministratorService, Router, AuthService, DataService])], LoginAdministratorComponent);\n  return LoginAdministratorComponent;\n}();\nexport { LoginAdministratorComponent };","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAQC,WAAW,EAAaC,UAAU,QAAO,gBAAgB;AACjE,SAAQC,aAAa,QAAO,+BAA+B;AAC3D,SAAQC,yBAAyB,QAAO,4DAA4D;AACpG,SAAQC,MAAM,QAAO,iBAAiB;AACtC,SAAQC,YAAY,QAAO,8BAA8B;AACzD,SAAQC,WAAW,QAAO,oCAAoC;AAC9D,SAAQC,WAAW,QAAO,+BAA+B;AAOzD;EAUE;EACA,qCAAoBC,IAAiB,EAAUC,WAAsC,EAAUC,MAAc,EAAUC,IAAiB,EAAUC,WAAwB;IAAtJ,SAAI,GAAJJ,IAAI;IAAuB,gBAAW,GAAXC,WAAW;IAAqC,WAAM,GAANC,MAAM;IAAkB,SAAI,GAAJC,IAAI;IAAuB,gBAAW,GAAXC,WAAW;IAT7J,iBAAY,GAAG,KAAK;IACpB,eAAU,GAAG,KAAK;IAClB,kBAAa,GAAG,KAAK;IACrB,iBAAY,GAAG,EAAE;IACjB;IACA,iBAAY,GAAG,IAAIP,YAAY,EAAE;IACjC,WAAM,GAAG,IAAIH,aAAa,EAAE;IAI1B,IAAI,CAACW,UAAU,EAAE;EACnB;EAEAC,8CAAQ,GAAR,aACA,CAAC;EACF;;;;;;;EAOCA,wDAAkB,GAAlB;IAAA;IACE,IAAI,IAAI,CAACC,sBAAsB,CAACC,OAAO,EAAE;MACvC;;IAEH;IACC,IAAI,CAACL,IAAI,CAACM,YAAY,CAAC,IAAI,CAACC,YAAY,CAACC,QAAQ,EAAE,IAAI,CAACD,YAAY,CAACE,QAAQ,CAAC,CAACC,SAAS,CACtF,cAAI;MACFC,KAAI,CAACC,UAAU,GAAG,IAAI;MACtBD,KAAI,CAACb,WAAW,CAACe,kBAAkB,CAACF,KAAI,CAACJ,YAAY,CAACC,QAAQ,CAAC,CAACE,SAAS,CAAC,gBAAM;QAC9EC,KAAI,CAACG,MAAM,GAAGA,MAAM;QACpBH,KAAI,CAACV,WAAW,CAACc,aAAa,GAAGJ,KAAI,CAACG,MAAM;MAC9C,CAAC,CAAC;MACF;MACAH,KAAI,CAACZ,MAAM,CAACiB,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;IAC/C,CAAC,EAAE,eAAK;MACNC,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MAClBR,KAAI,CAACS,YAAY,GAAGD,KAAK;MACzBR,KAAI,CAACC,UAAU,GAAG,KAAK;MACvBD,KAAI,CAACU,aAAa,GAAG,IAAI;IAC3B,CAAC,CACF;IACF;;;IAGC;;;;;;;;;;;;;;EAgBF,CAAC;;EACDlB,gDAAU,GAAV;IACE,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACP,IAAI,CAACyB,KAAK,CAAC;MAC5Cd,QAAQ,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACiC,OAAO,CAAC,CAACjC,UAAU,CAACkC,QAAQ,CAAC,CAAC,CAAC;MACzDf,QAAQ,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACkC,QAAQ;KACnC,CAAC;EACJ,CAAC;;;;;;;;;;;;;;EAtEUrB,2BAA2B,eALvCf,SAAS,CAAC;IACTqC,QAAQ,EAAE,yBAAyB;IACnCC,8BAAmD;;GAEpD,CAAC,mCAY0BrC,WAAW,EAAuBG,yBAAyB,EAAkBC,MAAM,EAAgBE,WAAW,EAAuBC,WAAW,KAX/JO,2BAA2B,CAuEvC;EAAD,kCAAC;CAAA,CA5ED;SAKaA,2BAA2B","names":["Component","FormBuilder","Validators","Administrator","HttpAdiministratorService","Router","User_account","AuthService","DataService","form","httpService","router","auth","dataService","createForm","LoginAdministratorComponent","loginAdministratorForm","invalid","authenticate","adminAccount","username","password","subscribe","_this","isLoggedin","loginAdministrator","result","administrator","navigate","console","log","error","errorMessage","isLoginFailed","group","compose","required","selector","template"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\administrator\\account-administrator\\login-administrator\\login-administrator.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {Administrator} from '../../../models/administrator';\nimport {HttpAdiministratorService} from '../../../service/administrator/http-adiministrator.service';\nimport {Router} from '@angular/router';\nimport {User_account} from '../../../models/user_account';\nimport {AuthService} from '../../../service/auth/auth.service';\nimport {DataService} from '../../../service/data.service';\n\n@Component({\n  selector: 'app-login-administrator',\n  templateUrl: './login-administrator.component.html',\n  styleUrls: ['./login-administrator.component.css']\n})\nexport class LoginAdministratorComponent implements OnInit {\n  loginAdministratorForm: FormGroup;\n  invalidLogin = false;\n  isLoggedin = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  // tslint:disable-next-line:variable-name\n  adminAccount = new User_account();\n  result = new Administrator();\n\n  // tslint:disable-next-line:max-line-length\n  constructor(private form: FormBuilder, private httpService: HttpAdiministratorService, private router: Router, private auth: AuthService, private dataService: DataService) {\n    this.createForm();\n  }\n\n  ngOnInit() {\n  }\n /* get username() {\n    return this.loginAdministratorForm.get('username');\n  }\n\n  get password() {\n    return this.loginAdministratorForm.get('password');\n  } */\n  LoginAdministrator() {\n    if (this.loginAdministratorForm.invalid) {\n      return;\n    }\n   // console.log(this.username.value + this.password.value);\n    this.auth.authenticate(this.adminAccount.username, this.adminAccount.password).subscribe(\n      data => {\n        this.isLoggedin = true;\n        this.httpService.loginAdministrator(this.adminAccount.username).subscribe(result => {\n          this.result = result;\n          this.dataService.administrator = this.result;\n        });\n        // tslint:disable-next-line:no-shadowed-variable\n        this.router.navigate(['/administrator/home']);\n      }, error => {\n        console.log(error);\n        this.errorMessage = error;\n        this.isLoggedin = false;\n        this.isLoginFailed = true;\n      }\n    );\n   /* this.administrator_account.username = this.username.value;\n    this.administrator_account.password = this.password.value;\n    console.log(this.administrator_account.username + this.administrator_account.password); */\n    /*\n\n            this.httpService.loginAdministrator(this.adminAccount.username).subscribe(data => {\n          this.result = data;\n          this.dataService.administrator = this.result;\n        });\n\n    this.httpService.loginAdministrator(this.username.value, this.password.value).subscribe(data => {\n      this.administrator_account = data;\n      if (this.administrator_account != null) {\n        this.router.navigate(['/administrator/home']);\n      } else {\n        this.invalidLogin = true;\n        alert('error');\n      }\n    }); */\n  }\n  createForm() {\n    this.loginAdministratorForm = this.form.group({\n      username: ['', Validators.compose([Validators.required])],\n      password: ['', Validators.required]\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}