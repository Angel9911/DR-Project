{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nvar customersUrl = 'http://localhost:8082/customers/';\nvar couriersUrl = 'http://localhost:8082/couriers/';\nvar adminUrl = 'http://localhost:8082/administrator/';\nvar reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json'\n});\nvar HttpAdiministratorService = /** @class */function () {\n  function HttpAdiministratorService(http) {\n    this.http = http;\n  }\n  HttpAdiministratorService.prototype.getUsers = function () {\n    var url = adminUrl + 'customers';\n    return this.http.get(url, {\n      headers: reqHeader\n    });\n  };\n  HttpAdiministratorService.prototype.getCouriers = function () {\n    var url = adminUrl + 'couriers';\n    return this.http.get(url, {\n      headers: reqHeader\n    });\n  };\n  HttpAdiministratorService.prototype.loginAdministrator = function (username) {\n    console.log(JSON.parse(localStorage.getItem('token')));\n    var url = adminUrl + username;\n    // @ts-ignore\n    return this.http.get(url, {\n      headers: reqHeader\n    });\n  };\n  //  DO TUK V DOKUMENTACIQ\n  /* getUserById(id: number) {\r\n      return this.http.get(this.baseUrl + id);\r\n    } */\n  HttpAdiministratorService.prototype.createCourier = function (coureir) {\n    var url = adminUrl + 'courier' + '/' + 'create';\n    return this.http.post(url, coureir, {\n      headers: reqHeader\n    });\n  };\n  HttpAdiministratorService.prototype.updateCourier = function () {};\n  // tslint:disable-next-line:variable-name\n  HttpAdiministratorService.prototype.deleteCourier = function (courier_id) {\n    var url = couriersUrl + 'delete' + '/' + courier_id;\n    return this.http.delete(url);\n  };\n  HttpAdiministratorService.prototype.createUser = function (customer) {\n    // const url = 'http://localhost:8082/create/';\n    var url = adminUrl + 'customer' + '/' + 'create';\n    return this.http.post(url, customer, {\n      headers: reqHeader\n    });\n  };\n  HttpAdiministratorService.prototype.updateUser = function (customer) {\n    var url = customersUrl + 'update';\n    return this.http.put(url, customer);\n  };\n  // tslint:disable-next-line:variable-name\n  HttpAdiministratorService.prototype.deleteUser = function (user_id) {\n    var url = customersUrl + 'delete' + '/' + user_id;\n    return this.http.delete(url);\n  };\n  HttpAdiministratorService.prototype.getAllTypes = function () {\n    var url = adminUrl + 'types';\n    return this.http.get(url, {\n      headers: reqHeader\n    });\n  };\n  HttpAdiministratorService.prototype.registerPackage = function (packages) {\n    var url = adminUrl + 'package' + '/' + 'create';\n    return this.http.post(url, packages, {\n      headers: reqHeader\n    });\n  };\n  HttpAdiministratorService.prototype.getAllPackages = function () {\n    var url = adminUrl + 'packages';\n    return this.http.get(url, {\n      headers: reqHeader\n    });\n  };\n  HttpAdiministratorService.ctorParameters = function () {\n    return [{\n      type: HttpClient\n    }];\n  };\n  HttpAdiministratorService = __decorate([Injectable({\n    providedIn: 'root'\n  }), __metadata(\"design:paramtypes\", [HttpClient])], HttpAdiministratorService);\n  return HttpAdiministratorService;\n}();\nexport { HttpAdiministratorService };","map":{"version":3,"mappings":"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","names":["Injectable","HttpClient","HttpHeaders","customersUrl","couriersUrl","adminUrl","reqHeader","http","HttpAdiministratorService","url","get","headers","username","console","log","JSON","parse","localStorage","getItem","coureir","post","courier_id","delete","customer","put","user_id","packages","providedIn"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\service\\administrator\\http-adiministrator.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Customer} from '../../models/user';\nimport {User_account} from '../../models/user_account';\nimport {Courier} from '../../models/Courier';\nimport {Packages} from '../../models/Packages';\n\nconst customersUrl = 'http://localhost:8082/customers/';\nconst couriersUrl = 'http://localhost:8082/couriers/';\nconst adminUrl = 'http://localhost:8082/administrator/';\n\nconst reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpAdiministratorService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getUsers() {\n    const url = adminUrl + 'customers';\n    return this.http.get<Customer[]>(url, {headers: reqHeader});\n  }\n\n  getCouriers() {\n    const url = adminUrl + 'couriers';\n    return this.http.get<Courier[]>(url, {headers: reqHeader});\n  }\n\n  loginAdministrator(username: string) {\n    console.log(JSON.parse(localStorage.getItem('token')));\n    const url = adminUrl + username;\n    // @ts-ignore\n    return this.http.get<User_account>(url, {headers: reqHeader});\n  }\n\n//  DO TUK V DOKUMENTACIQ\n  /* getUserById(id: number) {\n      return this.http.get(this.baseUrl + id);\n    } */\n  createCourier(coureir: Courier) {\n    const url = adminUrl + 'courier' + '/' + 'create';\n    return this.http.post(url, coureir, {headers: reqHeader});\n  }\n\n  updateCourier() {\n\n  }\n\n// tslint:disable-next-line:variable-name\n  deleteCourier(courier_id: bigint) {\n    const url = couriersUrl + 'delete' + '/' + courier_id;\n    return this.http.delete(url);\n  }\n\n  createUser(customer: Customer) {\n    // const url = 'http://localhost:8082/create/';\n    const url = adminUrl + 'customer' + '/' + 'create';\n    return this.http.post(url, customer, {headers: reqHeader});\n  }\n\n  updateUser(customer: Customer) {\n    const url = customersUrl + 'update';\n    return this.http.put<Customer>(url, customer);\n  }\n\n// tslint:disable-next-line:variable-name\n  deleteUser(user_id: bigint) {\n    const url = customersUrl + 'delete' + '/' + user_id;\n    return this.http.delete(url);\n  }\n\n  getAllTypes() {\n    const url = adminUrl + 'types';\n    return this.http.get<any[]>(url, {headers: reqHeader});\n  }\n\n  registerPackage(packages: Packages) {\n    const url = adminUrl + 'package' + '/' + 'create';\n    return this.http.post(url, packages, {headers: reqHeader});\n  }\n\n  getAllPackages() {\n    const url = adminUrl + 'packages';\n    return this.http.get<Packages[]>(url, {headers: reqHeader});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}