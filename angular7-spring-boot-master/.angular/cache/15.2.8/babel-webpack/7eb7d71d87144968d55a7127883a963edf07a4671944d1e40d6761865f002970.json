{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./user-account.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./user-account.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { Customer } from '../../../models/user';\nimport { DataService } from '../../../service/data.service';\nimport { FormBuilder, FormControl } from '@angular/forms';\nimport { HttpClientService } from '../../../service/customer/http-client.service';\nimport { AlertServiceService } from '../../../service/alert-service.service';\nimport { HttpClient } from '@angular/common/http';\nvar getCity = [];\nvar UserAccountComponent = /** @class */function () {\n  // tslint:disable-next-line:max-line-length\n  function UserAccountComponent(dataService, form, httpClientService, alertService, httpClient) {\n    this.dataService = dataService;\n    this.form = form;\n    this.httpClientService = httpClientService;\n    this.alertService = alertService;\n    this.httpClient = httpClient;\n    this.ProfileSrc = '../../assets/images/blue-user-icon-32.jpg';\n    this.towns = [];\n    this.createForm();\n    // this.getCities();\n  }\n\n  UserAccountComponent.prototype.ngOnInit = function () {\n    this.getCities();\n    this.FirstName = this.dataService.customer.name;\n    this.LastName = this.dataService.customer.last_name;\n    this.Email = this.dataService.customer.email;\n    this.userAccountForm.controls.firstname.setValue(this.dataService.customer.name);\n    this.userAccountForm.controls.lastname.setValue(this.dataService.customer.last_name);\n    this.userAccountForm.controls.email.setValue(this.dataService.customer.email);\n    this.userAccountForm.controls.address.setValue(this.dataService.customer.address);\n    this.userAccountForm.controls.phone.setValue(this.dataService.customer.phone);\n    this.ngSelect = this.dataService.customer.city;\n    this.userAccountForm.controls.city.setValue(this.ngSelect);\n    console.log('user_account city: ' + this.ngSelect);\n    // this.firstName = this.dataService.customer.name;\n  };\n\n  Object.defineProperty(UserAccountComponent.prototype, \"fname\", {\n    get: function () {\n      return this.userAccountForm.get('firstname');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UserAccountComponent.prototype, \"lname\", {\n    get: function () {\n      return this.userAccountForm.get('lastname');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UserAccountComponent.prototype, \"city\", {\n    get: function () {\n      return this.userAccountForm.get('city');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UserAccountComponent.prototype, \"phone\", {\n    get: function () {\n      return this.userAccountForm.get('phone');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UserAccountComponent.prototype, \"address\", {\n    get: function () {\n      return this.userAccountForm.get('address');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UserAccountComponent.prototype, \"email\", {\n    get: function () {\n      return this.userAccountForm.get('email');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  UserAccountComponent.prototype.updateCustomer = function (customer) {\n    this.loading = true;\n    this.alertService.clear();\n    this.updateObject = new Customer();\n    this.updateObject = this.dataService.customer;\n    this.updateObject.name = this.fname.value;\n    this.updateObject.last_name = this.lname.value;\n    this.updateObject.city = this.city.value;\n    this.updateObject.phone = this.phone.value;\n    this.updateObject.address = this.address.value;\n    this.updateObject.email = this.email.value;\n    console.log('test update object: ' + this.updateObject.user_account.username + this.updateObject.address);\n    // console.log('test in update2: ' + this.updateObject.user_id);\n    this.httpClientService.updateCustomer(this.updateObject).subscribe(function (data) {\n      alert('Успешно подновихте вашата лична информация');\n    });\n    /* this.httpClientService.updateCustomerAddress(this.updateObject.address, this.dataService.customer.user_id).subscribe(data => {\r\n       alert('User updated successfully');\r\n       this.loading = false;\r\n     }); */\n  };\n\n  UserAccountComponent.prototype.createForm = function () {\n    this.userAccountForm = this.form.group({\n      firstname: new FormControl(),\n      lastname: new FormControl(),\n      email: new FormControl(),\n      address: new FormControl(),\n      phone: new FormControl(),\n      city: new FormControl(),\n      oldPassword: new FormControl(),\n      newPassword: new FormControl()\n    });\n  };\n  UserAccountComponent.prototype.getCities = function () {\n    var _this = this;\n    this.httpClientService.getCities().subscribe(function (data) {\n      _this.towns = data;\n      // tslint:disable-next-line:only-arrow-functions\n      _this.towns.forEach(function (item) {\n        getCity.push(item.name);\n      });\n    });\n    this.cityList = getCity;\n  };\n  UserAccountComponent.ctorParameters = function () {\n    return [{\n      type: DataService\n    }, {\n      type: FormBuilder\n    }, {\n      type: HttpClientService\n    }, {\n      type: AlertServiceService\n    }, {\n      type: HttpClient\n    }];\n  };\n  UserAccountComponent = __decorate([Component({\n    selector: 'app-user-account',\n    template: __NG_CLI_RESOURCE__0,\n    styles: [__NG_CLI_RESOURCE__1]\n  }), __metadata(\"design:paramtypes\", [DataService, FormBuilder, HttpClientService, AlertServiceService, HttpClient])], UserAccountComponent);\n  return UserAccountComponent;\n}();\nexport { UserAccountComponent };","map":{"version":3,"mappings":"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","names":["Component","Customer","DataService","FormBuilder","FormControl","HttpClientService","AlertServiceService","HttpClient","getCity","dataService","form","httpClientService","alertService","httpClient","createForm","UserAccountComponent","getCities","FirstName","customer","name","LastName","last_name","Email","email","userAccountForm","controls","firstname","setValue","lastname","address","phone","ngSelect","city","console","log","Object","get","loading","clear","updateObject","fname","value","lname","user_account","username","updateCustomer","subscribe","alert","group","oldPassword","newPassword","_this","towns","data","forEach","item","push","cityList","selector","template"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\customers\\layout-user\\user-account\\user-account.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {Customer} from '../../../models/user';\nimport {DataService} from '../../../service/data.service';\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport {HttpClientService} from '../../../service/customer/http-client.service';\nimport {City} from '../../../models/City';\nimport {AlertServiceService} from '../../../service/alert-service.service';\nimport {HttpClient} from '@angular/common/http';\nconst getCity: any = [];\n\n@Component({\n  selector: 'app-user-account',\n  templateUrl: './user-account.component.html',\n  styleUrls: ['./user-account.component.css']\n})\nexport class UserAccountComponent implements OnInit {\n receiveObject: Customer;\n updateObject: Customer;\n  ProfileSrc = '../../assets/images/blue-user-icon-32.jpg';\n  ngSelect: string;\n  towns: any = [];\n  FirstName: string;\n  LastName: string;\n  Email: string;\n cityList: any[];\n loading: boolean;\n userAccountForm: FormGroup;\n  // tslint:disable-next-line:max-line-length\n  constructor(private dataService: DataService, private form: FormBuilder, private httpClientService: HttpClientService, private alertService: AlertServiceService, private httpClient: HttpClient) {\n     this.createForm();\n    // this.getCities();\n  }\n\n  ngOnInit() {\n    this.getCities();\n    this.FirstName = this.dataService.customer.name;\n    this.LastName = this.dataService.customer.last_name;\n    this.Email = this.dataService.customer.email;\n    this.userAccountForm.controls.firstname.setValue(this.dataService.customer.name);\n    this.userAccountForm.controls.lastname.setValue(this.dataService.customer.last_name);\n    this.userAccountForm.controls.email.setValue(this.dataService.customer.email);\n    this.userAccountForm.controls.address.setValue(this.dataService.customer.address);\n    this.userAccountForm.controls.phone.setValue(this.dataService.customer.phone);\n    this.ngSelect = this.dataService.customer.city;\n    this.userAccountForm.controls.city.setValue(this.ngSelect);\n    console.log('user_account city: ' + this.ngSelect);\n\n    // this.firstName = this.dataService.customer.name;\n  }\n  get fname() {\n    return this.userAccountForm.get('firstname');\n  }\n  get lname() {\n    return this.userAccountForm.get('lastname');\n  }\n  get city() {\n    return this.userAccountForm.get('city');\n  }\n  get phone() {\n    return this.userAccountForm.get('phone');\n  }\n  get address() {\n    return this.userAccountForm.get('address');\n\n  }\n  get email() {\n    return this.userAccountForm.get('email');\n\n  }\n  updateCustomer(customer) {\n    this.loading = true;\n    this.alertService.clear();\n    this.updateObject = new Customer();\n    this.updateObject = this.dataService.customer;\n    this.updateObject.name = this.fname.value;\n    this.updateObject.last_name = this.lname.value;\n    this.updateObject.city = this.city.value;\n    this.updateObject.phone = this.phone.value;\n    this.updateObject.address = this.address.value;\n    this.updateObject.email = this.email.value;\n    console.log('test update object: ' + this.updateObject.user_account.username + this.updateObject.address);\n   // console.log('test in update2: ' + this.updateObject.user_id);\n    this.httpClientService.updateCustomer(this.updateObject).subscribe(data => {\n      alert('Успешно подновихте вашата лична информация');\n    });\n   /* this.httpClientService.updateCustomerAddress(this.updateObject.address, this.dataService.customer.user_id).subscribe(data => {\n      alert('User updated successfully');\n      this.loading = false;\n    }); */\n  }\n  createForm() {\n    this.userAccountForm = this.form.group({\n      firstname: new FormControl(),\n      lastname: new FormControl(),\n      email: new FormControl(),\n      address: new FormControl(),\n      phone: new FormControl(),\n      city: new FormControl(),\n      oldPassword: new FormControl(),\n      newPassword: new FormControl()\n    });\n  }\n  getCities() {\n    this.httpClientService.getCities().subscribe(data => {\n      this.towns = data;\n      // tslint:disable-next-line:only-arrow-functions\n      this.towns.forEach(function(item) {\n        getCity.push(item.name);\n      });\n    });\n    this.cityList = getCity;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}