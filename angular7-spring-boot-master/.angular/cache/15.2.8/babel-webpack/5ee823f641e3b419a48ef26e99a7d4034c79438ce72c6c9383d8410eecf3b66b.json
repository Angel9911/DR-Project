{"ast":null,"code":"export function CheckMatch(password, confirmPassword) {\n  // tslint:disable-next-line:no-shadowed-variable\n  return function (formGroup) {\n    var control = formGroup.controls[password];\n    var matchingControl = formGroup.controls[confirmPassword];\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n      // return if another validator has already found an error on the matchingControl\n      return;\n    }\n    // set error on matchingControl if validation fails\n    if (control.value !== matchingControl.value) {\n      matchingControl.setErrors({\n        mustMatch: true\n      });\n    } else {\n      matchingControl.setErrors(null);\n    }\n  };\n}","map":{"version":3,"mappings":"AAIA,OAAM,SAAUA,UAAUA,CAACC,QAAgB,EAAEC,eAAuB;EAClE;EACA,OAAO,UAACC,SAAoB;IAC1B,IAAMC,OAAO,GAAGD,SAAS,CAACE,QAAQ,CAACJ,QAAQ,CAAC;IAC5C,IAAMK,eAAe,GAAGH,SAAS,CAACE,QAAQ,CAACH,eAAe,CAAC;IAE3D,IAAII,eAAe,CAACC,MAAM,IAAI,CAACD,eAAe,CAACC,MAAM,CAACC,SAAS,EAAE;MAC/D;MACA;;IAGF;IACA,IAAIJ,OAAO,CAACK,KAAK,KAAKH,eAAe,CAACG,KAAK,EAAE;MAC3CH,eAAe,CAACI,SAAS,CAAC;QAAEF,SAAS,EAAE;MAAI,CAAE,CAAC;KAC/C,MAAM;MACLF,eAAe,CAACI,SAAS,CAAC,IAAI,CAAC;;EAEnC,CAAC;AACH","names":["CheckMatch","password","confirmPassword","formGroup","control","controls","matchingControl","errors","mustMatch","value","setErrors"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\helpers\\match-validator.ts"],"sourcesContent":["import { FormGroup } from '@angular/forms';\r\nimport {User_account} from '../models/user_account';\r\nimport {HttpClientService} from '../service/customer/http-client.service';\r\n\r\nexport function CheckMatch(password: string, confirmPassword: string) {\r\n  // tslint:disable-next-line:no-shadowed-variable\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[password];\r\n    const matchingControl = formGroup.controls[confirmPassword];\r\n\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      // return if another validator has already found an error on the matchingControl\r\n      return;\r\n    }\r\n\r\n    // set error on matchingControl if validation fails\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}