{"ast":null,"code":"import _defineProperty from \"E:/Programs/SpringAngularProject/angular7-springboot-crud-tutorial-master/update-version/angular7-spring-boot-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst headers = new HttpHeaders().set('Content-Type', 'application/json');\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient, router) {\n      _defineProperty(this, \"httpClient\", void 0);\n      _defineProperty(this, \"router\", void 0);\n      this.httpClient = httpClient;\n      this.router = router;\n    }\n    authenticate(username, password) {\n      // @ts-ignore\n      // tslint:disable-next-line:max-line-length\n      return this.httpClient.post('http://localhost:8082/login', {\n        username,\n        password\n      }, {\n        headers\n      }).pipe(catchError(this.handleError), map(userData => {\n        sessionStorage.setItem('username', username);\n        const tokenStr = 'Bearer ' + userData.token;\n        console.log('Token' + tokenStr);\n        sessionStorage.setItem('token', tokenStr);\n        sessionStorage.setItem('roles', JSON.stringify(userData.roles));\n        return userData;\n      }));\n    }\n    getToken() {\n      return sessionStorage.getItem('token');\n    }\n    logout() {\n      sessionStorage.clear();\n      this.router.navigate(['']);\n    }\n    isLoggedIn() {\n      return sessionStorage.getItem('username') !== null;\n    }\n    handleError(httpError) {\n      let message = '';\n      if (httpError.error instanceof ProgressEvent) {\n        console.log('in progrss event');\n        message = 'Network error';\n      } else {\n        message = httpError.error.message;\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(`Backend returned code ${httpError.status}, ` + `body was: ${httpError.error}`);\n      }\n      // Return an observable with a user-facing error message.\n      return throwError(message);\n    }\n  }\n  _defineProperty(AuthService, \"\\u0275fac\", function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  });\n  _defineProperty(AuthService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  }));\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}