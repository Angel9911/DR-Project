{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { saveAs } from 'file-saver';\nvar accUrl = 'http://localhost:8082/account/';\nvar custUrl = 'http://localhost:8082/customer/';\nvar reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json',\n  Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n});\nvar HttpClientService = /** @class */function () {\n  function HttpClientService(httpClient) {\n    this.httpClient = httpClient;\n  }\n  Object.defineProperty(HttpClientService.prototype, \"adminValue\", {\n    get: function () {\n      return this.adminsubject.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  // tslint:disable-next-line:variable-name\n  HttpClientService.prototype.registerCustomer = function (customer) {\n    var url = 'http://localhost:8082/register';\n    // @ts-ignore\n    return this.httpClient.post(url, customer, {\n      responseType: 'text'\n    });\n  };\n  HttpClientService.prototype.loginCustomer = function (username) {\n    var url = custUrl + username;\n    // @ts-ignore\n    return this.httpClient.get(url, {\n      headers: reqHeader\n    });\n  };\n  HttpClientService.prototype.getCities = function () {\n    return this.httpClient.get('https://raw.githubusercontent.com/dbonev91/Bulgaria-Towns-JSON/master/towns.json');\n  };\n  HttpClientService.prototype.findUsername = function (username) {\n    // const url = accUrl + username;\n    return this.httpClient.get(\"\".concat(accUrl, \"?username=\").concat(username));\n  };\n  HttpClientService.prototype.findEmail = function (email) {\n    var url = custUrl + 'email/' + email;\n    return this.httpClient.get(\"\".concat(accUrl, \"?email=\").concat(email));\n  };\n  HttpClientService.prototype.updateCustomer = function (customer) {\n    var url = custUrl + 'update';\n    // @ts-ignore\n    return this.httpClient.put(url, customer);\n  };\n  // tslint:disable-next-line:variable-name\n  HttpClientService.prototype.getPackages = function (username) {\n    var url = custUrl + 'packages';\n    return this.httpClient.get(\"\".concat(url, \"?username=\").concat(username));\n  };\n  HttpClientService.prototype.forgotPassword = function (email) {\n    var url = 'http://localhost:8082/email/forgot/password';\n    return this.httpClient.get(\"\".concat(url, \"?toEmailAddress=\").concat(email));\n  };\n  HttpClientService.prototype.generateInvoice = function () {\n    var url = 'http://localhost:8082/invoice/generator';\n    this.httpClient.get(url, {\n      responseType: 'blob'\n    }).subscribe(function (response) {\n      saveAs(response, 'invoice.pdf');\n    });\n  };\n  HttpClientService.ctorParameters = function () {\n    return [{\n      type: HttpClient\n    }];\n  };\n  HttpClientService = __decorate([Injectable({\n    providedIn: 'root'\n  }), __metadata(\"design:paramtypes\", [HttpClient])], HttpClientService);\n  return HttpClientService;\n}();\nexport { HttpClientService };","map":{"version":3,"mappings":";AAAA,SAAQA,UAAU,QAAO,eAAe;AACxC,SAAQC,UAAU,EAAEC,WAAW,QAAO,sBAAsB;AAI5D,SAASC,MAAM,QAAQ,YAAY;AAKnC,IAAMC,MAAM,GAAG,gCAAgC;AAC/C,IAAMC,OAAO,GAAG,iCAAiC;AACjD,IAAMC,SAAS,GAAG,IAAIJ,WAAW,CAAC;EAChC,cAAc,EAAE,kBAAkB;EAClCK,cAAc,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;CACrE,CAAC;AAKF;EAKE,2BAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAC9B;EAEAC,sBAAWC,yCAAU;SAArB;MACE,OAAO,IAAI,CAACC,YAAY,CAACC,KAAK;IAChC,CAAC;;;;EAED;EACAF,4CAAgB,GAAhB,UAAiBG,QAAqB;IACpC,IAAMC,GAAG,GAAG,gCAAgC;IAE5C;IACA,OAAO,IAAI,CAACN,UAAU,CAACO,IAAI,CAAWD,GAAG,EAAED,QAAQ,EAAE;MAACG,YAAY,EAAE;IAAM,CAAC,CAAC;EAC9E,CAAC;EAEDN,yCAAa,GAAb,UAAcO,QAAgB;IAC5B,IAAMH,GAAG,GAAGb,OAAO,GAAGgB,QAAQ;IAC9B;IACA,OAAO,IAAI,CAACT,UAAU,CAACU,GAAG,CAAWJ,GAAG,EAAE;MAACK,OAAO,EAAEjB;IAAS,CAAC,CAAC;EACjE,CAAC;EAEDQ,qCAAS,GAAT;IACE,OAAO,IAAI,CAACF,UAAU,CAACU,GAAG,CAAQ,kFAAkF,CAAC;EACvH,CAAC;EAEDR,wCAAY,GAAZ,UAAaO,QAAgB;IAC3B;IACA,OAAO,IAAI,CAACT,UAAU,CAACU,GAAG,CAAU,UAAGlB,MAAM,uBAAaiB,QAAQ,CAAE,CAAC;EACvE,CAAC;EAEDP,qCAAS,GAAT,UAAUU,KAAa;IACrB,IAAMN,GAAG,GAAGb,OAAO,GAAG,QAAQ,GAAGmB,KAAK;IACtC,OAAO,IAAI,CAACZ,UAAU,CAACU,GAAG,CAAU,UAAGlB,MAAM,oBAAUoB,KAAK,CAAE,CAAC;EACjE,CAAC;EAEDV,0CAAc,GAAd,UAAeG,QAAkB;IAC/B,IAAMC,GAAG,GAAGb,OAAO,GAAG,QAAQ;IAC9B;IACA,OAAO,IAAI,CAACO,UAAU,CAACa,GAAG,CAAWP,GAAG,EAAED,QAAQ,CAAC;EACrD,CAAC;EAED;EACAH,uCAAW,GAAX,UAAYO,QAAgB;IAC1B,IAAMH,GAAG,GAAGb,OAAO,GAAG,UAAU;IAChC,OAAO,IAAI,CAACO,UAAU,CAACU,GAAG,CAAW,UAAGJ,GAAG,uBAAaG,QAAQ,CAAE,CAAC;EACrE,CAAC;EACDP,0CAAc,GAAd,UAAeU,KAAa;IAC1B,IAAMN,GAAG,GAAG,6CAA6C;IACzD,OAAO,IAAI,CAACN,UAAU,CAACU,GAAG,CAAW,UAAGJ,GAAG,6BAAmBM,KAAK,CAAE,CAAC;EACxE,CAAC;EACDV,2CAAe,GAAf;IACE,IAAMI,GAAG,GAAI,yCAAyC;IACtD,IAAI,CAACN,UAAU,CAACU,GAAG,CAACJ,GAAG,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CAACM,SAAS,CAAC,kBAAQ;MACnEvB,MAAM,CAACwB,QAAQ,EAAE,aAAa,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC;;;;;;EA5DUb,iBAAiB,eAH7Bd,UAAU,CAAC;IACV4B,UAAU,EAAE;GACb,CAAC,mCAMgC3B,UAAU,KAL/Ba,iBAAiB,CA6D7B;EAAD,wBAAC;CAAA,CAhED;SAGaA,iBAAiB","names":["Injectable","HttpClient","HttpHeaders","saveAs","accUrl","custUrl","reqHeader","Authentication","JSON","parse","localStorage","getItem","httpClient","Object","HttpClientService","adminsubject","value","customer","url","post","responseType","username","get","headers","email","put","subscribe","response","providedIn"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\service\\customer\\http-client.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {BehaviorSubject} from 'rxjs';\nimport {Customer} from '../../models/user';\nimport {Admin} from '../../models/admin';\nimport { saveAs } from 'file-saver';\nimport {City} from '../../models/City';\nimport {SendRequest} from '../../models/SendRequest';\nimport {Packages} from '../../models/Packages';\n\nconst accUrl = 'http://localhost:8082/account/';\nconst custUrl = 'http://localhost:8082/customer/';\nconst reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json',\n  Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n});\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientService {\n  private adminsubject: BehaviorSubject<Admin>;\n  public admin: Admin;\n  public customer: Customer;\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  public get adminValue(): Admin {\n    return this.adminsubject.value;\n  }\n\n  // tslint:disable-next-line:variable-name\n  registerCustomer(customer: SendRequest) {\n    const url = 'http://localhost:8082/register';\n\n    // @ts-ignore\n    return this.httpClient.post<Customer>(url, customer, {responseType: 'text'});\n  }\n\n  loginCustomer(username: string) {\n    const url = custUrl + username;\n    // @ts-ignore\n    return this.httpClient.get<Customer>(url, {headers: reqHeader});\n  }\n\n  getCities() {\n    return this.httpClient.get<any[]>('https://raw.githubusercontent.com/dbonev91/Bulgaria-Towns-JSON/master/towns.json');\n  }\n\n  findUsername(username: string) {\n    // const url = accUrl + username;\n    return this.httpClient.get<boolean>(`${accUrl}?username=${username}`);\n  }\n\n  findEmail(email: string) {\n    const url = custUrl + 'email/' + email;\n    return this.httpClient.get<boolean>(`${accUrl}?email=${email}`);\n  }\n\n  updateCustomer(customer: Customer) {\n    const url = custUrl + 'update';\n    // @ts-ignore\n    return this.httpClient.put<Customer>(url, customer);\n  }\n\n  // tslint:disable-next-line:variable-name\n  getPackages(username: string) {\n    const url = custUrl + 'packages';\n    return this.httpClient.get<Packages>(`${url}?username=${username}`);\n  }\n  forgotPassword(email: string) {\n    const url = 'http://localhost:8082/email/forgot/password';\n    return this.httpClient.get<Customer>(`${url}?toEmailAddress=${email}`);\n  }\n  generateInvoice() {\n    const url =  'http://localhost:8082/invoice/generator';\n    this.httpClient.get(url, { responseType: 'blob' }).subscribe(response => {\n      saveAs(response, 'invoice.pdf');\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}