{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./login-courier.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./login-courier.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { HttpCourierService } from '../../../service/courier/http-courier.service';\nimport { Courier } from '../../../models/Courier';\nimport { User_account } from '../../../models/user_account';\nimport { DataService } from '../../../service/data.service';\nimport { AuthService } from '../../../service/auth/auth.service';\n// @ts-ignore\nvar LoginCourierComponent = /** @class */function () {\n  // tslint:disable-next-line:max-line-length\n  function LoginCourierComponent(form, httpService, router, dataService, auth) {\n    this.form = form;\n    this.httpService = httpService;\n    this.router = router;\n    this.dataService = dataService;\n    this.auth = auth;\n    this.invalidLogin = false;\n    this.isLoggedin = false;\n    this.isLoginFailed = false;\n    this.errorMessage = '';\n    // tslint:disable-next-line:variable-name\n    this.courier_account = new User_account();\n    this.result = new Courier();\n    this.createForm();\n    // this.createUserForm();\n  }\n\n  LoginCourierComponent.prototype.ngOnInit = function () {};\n  /* get username() {\r\n     return this.loginCourierForm.get('username');\r\n   }\r\n  \n   get password() {\r\n     return this.loginCourierForm.get('password');\r\n   } */\n  LoginCourierComponent.prototype.LoginCourier = function () {\n    var _this = this;\n    if (this.loginCourierForm.invalid) {\n      return;\n    }\n    // console.log(this.username.value + this.password.value);\n    console.log(this.courier_account.username);\n    this.auth.authenticate(this.courier_account.username, this.courier_account.password).subscribe(function (data) {\n      _this.isLoggedin = true;\n      // tslint:disable-next-line:no-shadowed-variable\n      _this.httpService.loginCourier(_this.courier_account.username).subscribe(function (data) {\n        _this.result = data;\n        _this.dataService.courier = _this.result;\n      });\n      _this.router.navigate(['/courier/home']);\n    }, function (error) {\n      console.log(error);\n      _this.errorMessage = error;\n      _this.isLoggedin = false;\n      _this.isLoginFailed = true;\n    });\n    /* this.httpService.loginCourier(this.courier_account.username, this.courier_account.password).subscribe(data => {\r\n      this.result = data;\r\n      if (this.result != null) {\r\n        this.router.navigate(['/courier/home']);\r\n      } else {\r\n        this.invalidLogin = true;\r\n        alert('error');\r\n      }\r\n    }); */\n  };\n\n  LoginCourierComponent.prototype.createForm = function () {\n    this.loginCourierForm = this.form.group({\n      username: ['', Validators.compose([Validators.required])],\n      password: ['', Validators.required]\n    });\n  };\n  LoginCourierComponent.ctorParameters = function () {\n    return [{\n      type: FormBuilder\n    }, {\n      type: HttpCourierService\n    }, {\n      type: Router\n    }, {\n      type: DataService\n    }, {\n      type: AuthService\n    }];\n  };\n  LoginCourierComponent = __decorate([Component({\n    selector: 'app-login-courier',\n    template: __NG_CLI_RESOURCE__0,\n    styles: [__NG_CLI_RESOURCE__1]\n  }), __metadata(\"design:paramtypes\", [FormBuilder, HttpCourierService, Router, DataService, AuthService])], LoginCourierComponent);\n  return LoginCourierComponent;\n}();\nexport { LoginCourierComponent };","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAQC,WAAW,EAAaC,UAAU,QAAO,gBAAgB;AACjE,SAAQC,MAAM,QAAO,iBAAiB;AACtC,SAAQC,kBAAkB,QAAO,+CAA+C;AAChF,SAAQC,OAAO,QAAO,yBAAyB;AAC/C,SAAQC,YAAY,QAAO,8BAA8B;AACzD,SAAQC,WAAW,QAAO,+BAA+B;AACzD,SAAQC,WAAW,QAAO,oCAAoC;AAG9D;AAMA;EAUE;EACA,+BAAsBC,IAAiB,EAAUC,WAA+B,EAAUC,MAAc,EAAUC,WAAwB,EAAUC,IAAiB;IAA/I,SAAI,GAAJJ,IAAI;IAAuB,gBAAW,GAAXC,WAAW;IAA8B,WAAM,GAANC,MAAM;IAAkB,gBAAW,GAAXC,WAAW;IAAuB,SAAI,GAAJC,IAAI;IATxJ,iBAAY,GAAG,KAAK;IACpB,eAAU,GAAG,KAAK;IAClB,kBAAa,GAAG,KAAK;IACrB,iBAAY,GAAG,EAAE;IACjB;IACA,oBAAe,GAAG,IAAIP,YAAY,EAAE;IACpC,WAAM,GAAG,IAAID,OAAO,EAAE;IAIpB,IAAI,CAACS,UAAU,EAAE;IAClB;EACD;;EAEAC,wCAAQ,GAAR,aACA,CAAC;EACF;;;;;;;EAOCA,4CAAY,GAAZ;IAAA;IACE,IAAI,IAAI,CAACC,gBAAgB,CAACC,OAAO,EAAE;MACjC;;IAEH;IACCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,eAAe,CAACC,QAAQ,CAAC;IAE1C,IAAI,CAACR,IAAI,CAACS,YAAY,CAAC,IAAI,CAACF,eAAe,CAACC,QAAQ,EAAE,IAAI,CAACD,eAAe,CAACG,QAAQ,CAAC,CAACC,SAAS,CAC5F,cAAI;MACFC,KAAI,CAACC,UAAU,GAAG,IAAI;MACtB;MACAD,KAAI,CAACf,WAAW,CAACiB,YAAY,CAACF,KAAI,CAACL,eAAe,CAACC,QAAQ,CAAC,CAACG,SAAS,CAAC,cAAI;QACzEC,KAAI,CAACG,MAAM,GAAGC,IAAI;QAClBJ,KAAI,CAACb,WAAW,CAACkB,OAAO,GAAGL,KAAI,CAACG,MAAM;MACxC,CAAC,CAAC;MACFH,KAAI,CAACd,MAAM,CAACoB,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;IACzC,CAAC,EAAE,eAAK;MACNb,OAAO,CAACC,GAAG,CAACa,KAAK,CAAC;MAClBP,KAAI,CAACQ,YAAY,GAAGD,KAAK;MACzBP,KAAI,CAACC,UAAU,GAAG,KAAK;MACvBD,KAAI,CAACS,aAAa,GAAG,IAAI;IAC3B,CAAC,CACF;IAED;;;;;;;;;EASF,CAAC;;EACDnB,0CAAU,GAAV;IACE,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACP,IAAI,CAAC0B,KAAK,CAAC;MACtCd,QAAQ,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACkC,OAAO,CAAC,CAAClC,UAAU,CAACmC,QAAQ,CAAC,CAAC,CAAC;MACzDd,QAAQ,EAAE,CAAC,EAAE,EAAErB,UAAU,CAACmC,QAAQ;KACnC,CAAC;EACJ,CAAC;;;;;;;;;;;;;;EAhEUtB,qBAAqB,eALjCf,SAAS,CAAC;IACTsC,QAAQ,EAAE,mBAAmB;IAC7BC,8BAA6C;;GAE9C,CAAC,mCAY4BtC,WAAW,EAAuBG,kBAAkB,EAAkBD,MAAM,EAAuBI,WAAW,EAAgBC,WAAW,KAX1JO,qBAAqB,CAiEjC;EAAD,4BAAC;CAAA,CAtED;SAKaA,qBAAqB","names":["Component","FormBuilder","Validators","Router","HttpCourierService","Courier","User_account","DataService","AuthService","form","httpService","router","dataService","auth","createForm","LoginCourierComponent","loginCourierForm","invalid","console","log","courier_account","username","authenticate","password","subscribe","_this","isLoggedin","loginCourier","result","data","courier","navigate","error","errorMessage","isLoginFailed","group","compose","required","selector","template"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\courier\\account-courier\\login-courier\\login-courier.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {Router} from '@angular/router';\nimport {HttpCourierService} from '../../../service/courier/http-courier.service';\nimport {Courier} from '../../../models/Courier';\nimport {User_account} from '../../../models/user_account';\nimport {DataService} from '../../../service/data.service';\nimport {AuthService} from '../../../service/auth/auth.service';\nimport {UserDetails} from '../../../private_lib/UserDetails';\n\n// @ts-ignore\n@Component({\n  selector: 'app-login-courier',\n  templateUrl: './login-courier.component.html',\n  styleUrls: ['./login-courier.component.css']\n})\nexport class LoginCourierComponent /*extends UserDetails*/ implements OnInit {\n  loginCourierForm: FormGroup;\n  invalidLogin = false;\n  isLoggedin = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  // tslint:disable-next-line:variable-name\n  courier_account = new User_account();\n  result = new Courier();\n\n  // tslint:disable-next-line:max-line-length\n  constructor(protected form: FormBuilder, private httpService: HttpCourierService, private router: Router, private dataService: DataService, private auth: AuthService) {\n    this.createForm();\n   // this.createUserForm();\n  }\n\n  ngOnInit() {\n  }\n /* get username() {\n    return this.loginCourierForm.get('username');\n  }\n\n  get password() {\n    return this.loginCourierForm.get('password');\n  } */\n  LoginCourier() {\n    if (this.loginCourierForm.invalid) {\n      return;\n    }\n   // console.log(this.username.value + this.password.value);\n    console.log(this.courier_account.username);\n\n    this.auth.authenticate(this.courier_account.username, this.courier_account.password).subscribe(\n      data => {\n        this.isLoggedin = true;\n        // tslint:disable-next-line:no-shadowed-variable\n        this.httpService.loginCourier(this.courier_account.username).subscribe(data => {\n          this.result = data;\n          this.dataService.courier = this.result;\n        });\n        this.router.navigate(['/courier/home']);\n      }, error => {\n        console.log(error);\n        this.errorMessage = error;\n        this.isLoggedin = false;\n        this.isLoginFailed = true;\n      }\n    );\n\n    /* this.httpService.loginCourier(this.courier_account.username, this.courier_account.password).subscribe(data => {\n      this.result = data;\n      if (this.result != null) {\n        this.router.navigate(['/courier/home']);\n      } else {\n        this.invalidLogin = true;\n        alert('error');\n      }\n    }); */\n  }\n  createForm() {\n    this.loginCourierForm = this.form.group({\n      username: ['', Validators.compose([Validators.required])],\n      password: ['', Validators.required]\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}