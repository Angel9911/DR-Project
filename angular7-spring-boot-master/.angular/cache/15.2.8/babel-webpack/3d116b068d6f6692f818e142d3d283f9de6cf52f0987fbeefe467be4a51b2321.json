{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nvar chatbotUrl = 'http://localhost:8082/chatbot/dialogflow/';\nvar reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json',\n  Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n});\nvar ChatbotServiceService = /** @class */function () {\n  function ChatbotServiceService(httpChatBot) {\n    this.httpChatBot = httpChatBot;\n  }\n  ChatbotServiceService.prototype.getSessionId = function () {\n    var reqHeader2 = new HttpHeaders({\n      'Content-Type': 'application/text',\n      Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n    });\n    var url = chatbotUrl + 'sessionId';\n    // @ts-ignore\n    return this.httpChatBot.get(url, {\n      responseType: 'text',\n      headers: reqHeader2\n    });\n  };\n  ChatbotServiceService.prototype.sendMessage = function (text, sessionId) {\n    var url = chatbotUrl + 'send/message/' + sessionId;\n    var body = {\n      text: text\n    };\n    console.log(text);\n    return this.httpChatBot.post(url, {\n      message: text\n    }, {\n      headers: reqHeader\n    });\n  };\n  ChatbotServiceService.ctorParameters = function () {\n    return [{\n      type: HttpClient\n    }];\n  };\n  ChatbotServiceService = __decorate([Injectable({\n    providedIn: 'root'\n  }), __metadata(\"design:paramtypes\", [HttpClient])], ChatbotServiceService);\n  return ChatbotServiceService;\n}();\nexport { ChatbotServiceService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAAQC,UAAU,EAAEC,WAAW,QAAO,sBAAsB;AAG5D,IAAMC,UAAU,GAAG,2CAA2C;AAC9D,IAAMC,SAAS,GAAG,IAAIF,WAAW,CAAC;EAChC,cAAc,EAAE,kBAAkB;EAClCG,cAAc,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;CACrE,CAAC;AAKF;EAEE,+BAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,4CAAY,GAAZ;IACE,IAAMC,UAAU,GAAG,IAAIV,WAAW,CAAC;MACnC,cAAc,EAAE,kBAAkB;MAChCG,cAAc,EAAE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;KACvE,CAAC;IACA,IAAMI,GAAG,GAAGV,UAAU,GAAG,WAAW;IACpC;IACA,OAAO,IAAI,CAACO,WAAW,CAACI,GAAG,CAAMD,GAAG,EAAE;MAACE,YAAY,EAAE,MAAM;MAAEC,OAAO,EAAEJ;IAAU,CAAC,CAAC;EACpF,CAAC;EACDD,2CAAW,GAAX,UAAYM,IAAY,EAAEC,SAAiB;IACzC,IAAML,GAAG,GAAGV,UAAU,GAAG,eAAe,GAAGe,SAAS;IACpD,IAAMC,IAAI,GAAG;MACTF,IAAI;KACP;IACDG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IACjB,OAAO,IAAI,CAACP,WAAW,CAACY,IAAI,CAACT,GAAG,EAAE;MAACU,OAAO,EAAEN;IAAI,CAAC,EAAE;MAACD,OAAO,EAAEZ;IAAS,CAAC,CAAC;EAC1E,CAAC;;;;;;EApBUO,qBAAqB,eAHjCX,UAAU,CAAC;IACVwB,UAAU,EAAE;GACb,CAAC,mCAGiCvB,UAAU,KAFhCU,qBAAqB,CAqBjC;EAAD,4BAAC;CAAA,CAxBD;SAGaA,qBAAqB","names":["Injectable","HttpClient","HttpHeaders","chatbotUrl","reqHeader","Authentication","JSON","parse","localStorage","getItem","httpChatBot","ChatbotServiceService","reqHeader2","url","get","responseType","headers","text","sessionId","body","console","log","post","message","providedIn"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\service\\chatbot-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\nconst chatbotUrl = 'http://localhost:8082/chatbot/dialogflow/';\nconst reqHeader = new HttpHeaders({\n  'Content-Type': 'application/json',\n  Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n});\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatbotServiceService {\n\n  constructor(private httpChatBot: HttpClient) { }\n\n  getSessionId() {\n    const reqHeader2 = new HttpHeaders({\n    'Content-Type': 'application/text',\n      Authentication: 'Bearer ' + JSON.parse(localStorage.getItem('token'))\n  });\n    const url = chatbotUrl + 'sessionId';\n    // @ts-ignore\n    return this.httpChatBot.get<any>(url, {responseType: 'text', headers: reqHeader2});\n  }\n  sendMessage(text: string, sessionId: string): Observable<any> {\n    const url = chatbotUrl + 'send/message/' + sessionId;\n    const body = {\n        text\n    };\n    console.log(text);\n    return this.httpChatBot.post(url, {message: text}, {headers: reqHeader});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}