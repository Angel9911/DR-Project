{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./register-user.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./register-user.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { HttpClientService } from '../../../service/customer/http-client.service';\nimport { Router } from '@angular/router';\nimport { AlertServiceService } from '../../../service/alert-service.service';\nimport { Customer } from '../../../models/user';\nimport { CheckMatch } from '../../../helpers/match-validator';\nimport { City } from '../../../models/City';\nimport { existingUsernameValidator, existingEmailValidator } from '../../../helpers/UsernameValidator';\nimport { HttpClient } from '@angular/common/http';\nimport { SendRequest } from '../../../models/SendRequest';\nvar getCit = [];\nvar getRole = [];\nvar RegisterUserComponent = /** @class */function () {\n  // tslint:disable-next-line:variable-name\n  /*error_messages = {\r\n    confirm_password: [\r\n      {type: 'mustmatch', message: 'Паролите трябва да се съвпадат!'}\r\n    ]\r\n  };*/\n  // phonePattern = '^((\\\\+91-?)|0)?[0-9]{10}$';\n  // tslint:disable-next-line:max-line-length\n  function RegisterUserComponent(httpClientService, router, formBuilder, alertService, httpClient) {\n    this.httpClientService = httpClientService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.alertService = alertService;\n    this.httpClient = httpClient;\n    this.rolesArray = [];\n    this.customerRegister = new Customer();\n    this.customer = new Customer();\n    this.sendRequest = new SendRequest();\n    this.cityList = [];\n    this.towns = [];\n    this.getCity = new City();\n    this.emailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$\";\n    this.phonePattern = '08[789]\\\\d{7}';\n    this.passwordPattern = '^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\\\S+$).{8,}$';\n    this.CreateLoginForm();\n    // this.getCities();\n  }\n\n  Object.defineProperty(RegisterUserComponent.prototype, \"username\", {\n    get: function () {\n      return this.registerform.get('username');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RegisterUserComponent.prototype, \"email\", {\n    get: function () {\n      return this.registerform.get('email');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RegisterUserComponent.prototype, \"city\", {\n    get: function () {\n      return this.registerform.get('city');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  // @ts-ignore\n  RegisterUserComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.httpClientService.getCities().subscribe(function (data) {\n      _this.towns = data;\n      // tslint:disable-next-line:only-arrow-functions\n      _this.towns.forEach(function (item) {\n        getCit.push(item.name);\n      });\n    });\n    this.cityList = getCit;\n  };\n  RegisterUserComponent.prototype.CreateLoginForm = function () {\n    this.registerform = this.formBuilder.group({\n      username: new FormControl('', [Validators.required], [existingUsernameValidator(this.httpClientService)]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern(this.passwordPattern)]),\n      confirm_password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern(this.passwordPattern)]),\n      firstname: new FormControl('', [Validators.required]),\n      lastname: new FormControl('', [Validators.required]),\n      // tslint:disable-next-line:max-line-length\n      email: new FormControl('', [Validators.required, Validators.pattern(this.emailPattern)], [existingEmailValidator(this.httpClientService)]),\n      city: new FormControl('', [Validators.required]),\n      address: new FormControl('', [Validators.required]),\n      phone: new FormControl('', [Validators.required, Validators.pattern(this.phonePattern), Validators.maxLength(10)])\n    }, {\n      validator: CheckMatch('password', 'confirm_password')\n    });\n  };\n  Object.defineProperty(RegisterUserComponent.prototype, \"f\", {\n    get: function () {\n      return this.registerform.controls;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  RegisterUserComponent.prototype.RegisterUser = function (user) {\n    var _this = this;\n    this.submitted = true;\n    this.alertService.clear();\n    if (this.registerform.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.alertService.clear();\n    console.log('test city ' + this.city.value);\n    //  this.httpClientService.getCityIdByName(this.city.value).subscribe(data => {\n    this.sendRequest.customer = this.customerRegister;\n    this.sendRequest.customer.city = this.city.value;\n    this.rolesArray.push('user');\n    // tslint:disable-next-line:only-arrow-functions\n    this.rolesArray.forEach(function (item) {\n      getRole.push(item);\n    });\n    this.sendRequest.roles = getRole;\n    console.log(this.sendRequest);\n    this.httpClientService.registerCustomer(this.sendRequest).subscribe(function (response) {\n      alert('Потребителят е създаден успешно');\n      _this.router.navigate(['/customers/login']);\n    });\n  };\n  RegisterUserComponent.ctorParameters = function () {\n    return [{\n      type: HttpClientService\n    }, {\n      type: Router\n    }, {\n      type: FormBuilder\n    }, {\n      type: AlertServiceService\n    }, {\n      type: HttpClient\n    }];\n  };\n  RegisterUserComponent = __decorate([Component({\n    selector: 'app-register-user',\n    template: __NG_CLI_RESOURCE__0,\n    styles: [__NG_CLI_RESOURCE__1]\n  }), __metadata(\"design:paramtypes\", [HttpClientService, Router, FormBuilder, AlertServiceService, HttpClient])], RegisterUserComponent);\n  return RegisterUserComponent;\n}();\nexport { RegisterUserComponent };\n/*\r\n[existingEmailValidator(this.httpClientService)]\r\n CheckPassword(formGroup: FormGroup) {\r\n  const { value: password } = formGroup.get('password');\r\n  const { value: confirmPassword } = formGroup.get('confirm_password');\r\n  return password === confirmPassword ? null : { passwordNotMatch: true};\r\n}\r\ngetCities(); {\r\n  this.httpClientService.getCities().subscribe(data => {\r\n    this.cityList = data;\r\n  });\r\n} */\n/*\r\nfunction getCitiesFromJson() {\r\n  this.httpClient.get('assets/towns.json').subscribe(data => {\r\n    this.towns = data;\r\n    console.log(this.towns);\r\n  });\r\n} */\n// tslint:disable-next-line:align","map":{"version":3,"mappings":"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","names":["Component","FormBuilder","FormControl","Validators","HttpClientService","Router","AlertServiceService","Customer","CheckMatch","City","existingUsernameValidator","existingEmailValidator","HttpClient","SendRequest","getCit","getRole","httpClientService","router","formBuilder","alertService","httpClient","CreateLoginForm","Object","RegisterUserComponent","registerform","get","getCities","subscribe","_this","towns","data","forEach","item","push","name","cityList","group","username","required","password","minLength","pattern","passwordPattern","confirm_password","firstname","lastname","email","emailPattern","city","address","phone","phonePattern","maxLength","validator","controls","user","submitted","clear","invalid","loading","console","log","value","sendRequest","customer","customerRegister","rolesArray","roles","registerCustomer","alert","navigate","selector","template"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\customers\\account-user\\register-user\\register-user.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {HttpClientService} from '../../../service/customer/http-client.service';\nimport {Router} from '@angular/router';\nimport {AlertServiceService} from '../../../service/alert-service.service';\nimport {Customer} from '../../../models/user';\nimport {CheckMatch} from '../../../helpers/match-validator';\nimport {City} from '../../../models/City';\nimport {User_account} from '../../../models/user_account';\nimport {existingUsernameValidator, existingEmailValidator} from '../../../helpers/UsernameValidator';\nimport {HttpClient} from '@angular/common/http';\nimport {SendRequest} from '../../../models/SendRequest';\n\nconst getCit: any = [];\nconst getRole: any = [];\n\n@Component({\n  selector: 'app-register-user',\n  templateUrl: './register-user.component.html',\n  styleUrls: ['./register-user.component.css']\n})\nexport class RegisterUserComponent implements OnInit {\n  rolesArray: any = [];\n  customerRegister = new Customer();\n  customer = new Customer();\n  sendRequest = new SendRequest();\n  cityList: any = [];\n  towns: any = [];\n  getCity = new City();\n  registerform: FormGroup;\n  // tslint:disable-next-line:variable-name\n  submitted: boolean;\n  loading: boolean;\n  emailPattern = `^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$`;\n  phonePattern = '08[789]\\\\d{7}';\n  passwordPattern = '^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\\\S+$).{8,}$';\n  // tslint:disable-next-line:variable-name\n  /*error_messages = {\n    confirm_password: [\n      {type: 'mustmatch', message: 'Паролите трябва да се съвпадат!'}\n    ]\n  };*/\n  // phonePattern = '^((\\\\+91-?)|0)?[0-9]{10}$';\n\n  // tslint:disable-next-line:max-line-length\n  constructor(private httpClientService: HttpClientService, private router: Router, private formBuilder: FormBuilder, private alertService: AlertServiceService, private httpClient: HttpClient) {\n    this.CreateLoginForm();\n    // this.getCities();\n  }\n\n  get username() {\n    return this.registerform.get('username');\n  }\n\n  get email() {\n    return this.registerform.get('email');\n  }\n\n  get city() {\n    return this.registerform.get('city');\n  }\n\n  // @ts-ignore\n  ngOnInit() {\n    this.httpClientService.getCities().subscribe(data => {\n      this.towns = data;\n      // tslint:disable-next-line:only-arrow-functions\n      this.towns.forEach(function(item) {\n        getCit.push(item.name);\n      });\n    });\n    this.cityList = getCit;\n  }\n\n  CreateLoginForm() {\n    this.registerform = this.formBuilder.group({\n      username: new FormControl('', [Validators.required], [existingUsernameValidator(this.httpClientService)]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern(this.passwordPattern)]),\n      confirm_password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern(this.passwordPattern)]),\n      firstname: new FormControl('', [Validators.required]),\n      lastname: new FormControl('', [Validators.required]),\n      // tslint:disable-next-line:max-line-length\n      email: new FormControl('', [Validators.required, Validators.pattern(this.emailPattern)], [existingEmailValidator(this.httpClientService)]),\n      city: new FormControl('', [Validators.required]),\n      address: new FormControl('', [Validators.required]),\n      phone: new FormControl('', [Validators.required, Validators.pattern(this.phonePattern), Validators.maxLength(10)]),\n    }, {\n      validator: CheckMatch('password', 'confirm_password')\n    });\n  }\n\n  get f() {\n    return this.registerform.controls;\n  }\n\n  RegisterUser(user) {\n     this.submitted = true;\n     this.alertService.clear();\n     if (this.registerform.invalid) {\n       return;\n     }\n     this.loading = true;\n     this.alertService.clear();\n     console.log('test city ' + this.city.value);\n   //  this.httpClientService.getCityIdByName(this.city.value).subscribe(data => {\n     this.sendRequest.customer = this.customerRegister;\n     this.sendRequest.customer.city = this.city.value;\n     this.rolesArray.push('user');\n       // tslint:disable-next-line:only-arrow-functions\n     this.rolesArray.forEach(function(item) {\n         getRole.push(item);\n       });\n     this.sendRequest.roles = getRole;\n     console.log(this.sendRequest);\n     this.httpClientService.registerCustomer(this.sendRequest).subscribe(response => {\n         alert('Потребителят е създаден успешно');\n         this.router.navigate(['/customers/login']);\n       });\n       }\n   //  );\n     /*console.log('get city: ' + this.getCity.city_id);\n     this.sendRequest.customer = this.customerRegister;\n    // this.customerRegister.city_id = this.getCity.city_id;\n    // this.customerRegister.user_account = this.accountRegister;\n    // this.customerRegister.city.city_id = this.getCity.city_id;\n    // this.sendRequest.customer.city.city_id = this.getCity.city_id;\n    // tslint:disable-next-line:only-arrow-functions\n     this.rolesArray.push('user');\n    // tslint:disable-next-line:only-arrow-functions\n     this.rolesArray.forEach(function(item) {\n       getRole.push(item);\n     });\n     this.sendRequest.roles = getRole;\n     console.log(this.sendRequest);\n     this.httpClientService.registerCustomer(this.sendRequest).subscribe(response => {\n      alert('Потребителят е създаден успешно');\n      this.router.navigate(['/customers/login']);\n    }); */\n\n  /* private getCitiesFromJson() {\n    this.httpClient.get('assets/towns.json').subscribe(data => {\n      this.towns = data;\n      console.log(this.towns);\n    });\n  } */\n}\n  /*\n  [existingEmailValidator(this.httpClientService)]\n   CheckPassword(formGroup: FormGroup) {\n    const { value: password } = formGroup.get('password');\n    const { value: confirmPassword } = formGroup.get('confirm_password');\n    return password === confirmPassword ? null : { passwordNotMatch: true};\n  }\ngetCities(); {\n    this.httpClientService.getCities().subscribe(data => {\n      this.cityList = data;\n    });\n  } */\n/*\nfunction getCitiesFromJson() {\n  this.httpClient.get('assets/towns.json').subscribe(data => {\n    this.towns = data;\n    console.log(this.towns);\n  });\n} */\n\n// tslint:disable-next-line:align\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}