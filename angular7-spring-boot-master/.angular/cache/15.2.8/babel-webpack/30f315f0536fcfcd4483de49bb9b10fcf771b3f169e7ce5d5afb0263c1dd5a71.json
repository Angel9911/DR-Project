{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\nvar AuthInterceptorService = /** @class */function () {\n  function AuthInterceptorService(authService) {\n    this.authService = authService;\n  }\n  AuthInterceptorService.prototype.intercept = function (req, next) {\n    var modifiedReq = req;\n    console.log(this.authService.getToken());\n    if (sessionStorage.getItem('username') && sessionStorage.getItem('token')) {\n      console.log('With Token --- ' + sessionStorage.getItem('token'));\n      modifiedReq = req.clone({\n        setHeaders: {\n          Authorization: this.authService.getToken()\n        }\n      });\n    }\n    return next.handle(modifiedReq);\n  };\n  AuthInterceptorService.ctorParameters = function () {\n    return [{\n      type: AuthService\n    }];\n  };\n  AuthInterceptorService = __decorate([Injectable({\n    providedIn: 'root'\n  }), __metadata(\"design:paramtypes\", [AuthService])], AuthInterceptorService);\n  return AuthInterceptorService;\n}();\nexport { AuthInterceptorService };","map":{"version":3,"mappings":";AAAA,SAAQA,UAAU,QAAO,eAAe;AAGxC,SAAQC,WAAW,QAAO,gBAAgB;AAK1C;EAEE,gCAAmBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAC9B;EAEAC,0CAAS,GAAT,UAAUC,GAAqB,EAAEC,IAAiB;IAChD,IAAIC,WAAW,GAAGF,GAAG;IACrBG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,WAAW,CAACO,QAAQ,EAAE,CAAC;IACxC,IAAIC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC,IAAID,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;MACzEJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGE,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;MAChEL,WAAW,GAAGF,GAAG,CAACQ,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,IAAI,CAACZ,WAAW,CAACO,QAAQ;;OAE3C,CAAC;;IAEJ,OAAOJ,IAAI,CAACU,MAAM,CAACT,WAAW,CAAC;EACjC,CAAC;;;;;;EAjBUH,sBAAsB,eAHlCH,UAAU,CAAC;IACVgB,UAAU,EAAE;GACb,CAAC,mCAGgCf,WAAW,KAFhCE,sBAAsB,CAkBlC;EAAD,6BAAC;CAAA,CArBD;SAGaA,sBAAsB","names":["Injectable","AuthService","authService","AuthInterceptorService","req","next","modifiedReq","console","log","getToken","sessionStorage","getItem","clone","setHeaders","Authorization","handle","providedIn"],"sourceRoot":"","sources":["E:\\Programs\\SpringAngularProject\\angular7-springboot-crud-tutorial-master\\update-version\\angular7-spring-boot-master\\src\\app\\service\\auth\\auth-interceptor.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {AuthService} from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n\n  constructor(public authService: AuthService) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let modifiedReq = req;\n    console.log(this.authService.getToken());\n    if (sessionStorage.getItem('username') && sessionStorage.getItem('token')) {\n      console.log('With Token --- ' + sessionStorage.getItem('token'));\n      modifiedReq = req.clone({\n        setHeaders: {\n          Authorization: this.authService.getToken()\n        }\n      });\n    }\n    return next.handle(modifiedReq);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}